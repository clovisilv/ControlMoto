package br.com.cs.controlmoto.controller;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.JDesktopPane;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;

import br.com.cs.controlmoto.domain.AgendamentoDAO;
import br.com.cs.controlmoto.domain.TarefaDAO;
import br.com.cs.controlmoto.utils.ConvertStringToDate;
import br.com.cs.controlmoto.vo.AgendamentoVO;
import br.com.cs.controlmoto.vo.TarefaVO;

/**
 *
 * @author Fictec
 */
public class TabAgenda_Old_New extends javax.swing.JInternalFrame {

    /**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	
	/**
     * Creates new form TabAgenda
     */
    public TabAgenda_Old_New(String titulo, ControlMoto controlMoto) {
        initComponents(titulo, controlMoto);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents(String titulo, ControlMoto controlMoto) {
    	
        jtbBarraFerramenta = new javax.swing.JToolBar();
        jbNovo = new javax.swing.JButton(); jbAlterar = new javax.swing.JButton(); jbCancelar = new javax.swing.JButton();
        
        jpRodape = new javax.swing.JPanel(); jpEsquerdo = new javax.swing.JPanel(); jpSuperior = new javax.swing.JPanel();
        jpDireito = new javax.swing.JPanel();
        
        jmcMes = new com.toedter.calendar.JMonthChooser(); jycAno = new com.toedter.calendar.JYearChooser(); 
        jdcDia = new com.toedter.calendar.JDayChooser();
        
        jtAgenda = new javax.swing.JTable(); jtTarefa = new javax.swing.JTable();
        
        jScrollPane1 = new javax.swing.JScrollPane(); jScrollPane2 = new javax.swing.JScrollPane();
        
        colModelTarefa = jtTarefa.getColumnModel(); colModelAgenda = jtAgenda.getColumnModel();
        tcrEsqueda = new DefaultTableCellRenderer();tcrEsqueda.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
    	tcrDireta = new DefaultTableCellRenderer();tcrDireta.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
    	tcrCentro = new DefaultTableCellRenderer();tcrCentro.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);        
        jDesktopPane = new JDesktopPane();
        modTarefa = true; modAgenda = true;
        //VARIAVEIS DE PAINEL AGENDAMENTO
        lblCodigo = new javax.swing.JLabel(); lblValorCodigo = new javax.swing.JLabel(); lblDataAgendamento = new javax.swing.JLabel();
        lblHora = new javax.swing.JLabel(); lblCliente = new javax.swing.JLabel(); lblTarefa = new javax.swing.JLabel();
        lblStatus = new javax.swing.JLabel(); lblValorStatus = new javax.swing.JLabel(); lblMotorista = new javax.swing.JLabel();
        lblNumeroOS = new javax.swing.JLabel(); lblValorNumeroOS = new javax.swing.JLabel();
        
        jftDataAgendamento = new javax.swing.JFormattedTextField(); jftHora = new javax.swing.JFormattedTextField();
        
        jcbCliente = new javax.swing.JComboBox(); jcbTarefa = new javax.swing.JComboBox(); jcbMotorista = new javax.swing.JComboBox();

        jbSalvar = new javax.swing.JButton(); jbAtualizar = new javax.swing.JButton(); jbImprimir = new javax.swing.JButton();
        
        jtbBarraFerramentas = new javax.swing.JToolBar();

//        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setClosable(true);
        setIconifiable(true);
        setTitle("Agenda");
        setToolTipText("Agenda");
        setMaximumSize(new java.awt.Dimension(900, 500));
        setMinimumSize(new java.awt.Dimension(600, 100));
        setPreferredSize(new java.awt.Dimension(650, 500));
//        addWindowListener(new java.awt.event.WindowAdapter() {
//            public void windowActivated(java.awt.event.WindowEvent evt) {
////                formWindowActivated(evt);
//            }
//        });
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameActivated(evt);
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
//                formInternalFrameClosing(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });
       
        setLocation(xOffset*openFrameCount, yOffset*openFrameCount);
        this.telaControlMoto = telaControlMoto;
    	controlMoto.jDesktopPane.add(this);

        jtbBarraFerramenta.setFloatable(false);
        jtbBarraFerramenta.setRollover(true);
        jtbBarraFerramenta.setToolTipText("Barra de Ferramenta Agenda");
        
        jtbBarraFerramenta.setFloatable(false);
        jtbBarraFerramenta.setRollover(true);
        jtbBarraFerramenta.setToolTipText("Barra de Ferramenta Agenda");

        jbNovo.setText("Novo");
        jbNovo.setFocusable(false);
        jbNovo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbNovo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jbNovo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbNovoActionPerformed(evt);
            }
        });
        jtbBarraFerramenta.add(jbNovo);

        jbAlterar.setText("Alterar");
        jbAlterar.setFocusable(false);
        jbAlterar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbAlterar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jbAlterar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	jbAlterarActionPerformed(evt);
            }
        });      
        jtbBarraFerramenta.add(jbAlterar);
        
        jbCancelar.setText("Cancelar");
        jbCancelar.setFocusable(false);
        jbCancelar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbCancelar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jbCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	jbCancelarActionPerformed(evt);
            }
        });                
        jtbBarraFerramenta.add(jbCancelar);

        javax.swing.GroupLayout jpSuperiorLayout = new javax.swing.GroupLayout(jpSuperior);
        jpSuperior.setLayout(jpSuperiorLayout);
        jpSuperiorLayout.setHorizontalGroup(
            jpSuperiorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jtbBarraFerramenta, javax.swing.GroupLayout.DEFAULT_SIZE, 636, Short.MAX_VALUE)
        );
        jpSuperiorLayout.setVerticalGroup(
            jpSuperiorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpSuperiorLayout.createSequentialGroup()
                .addComponent(jtbBarraFerramenta, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 23, Short.MAX_VALUE))
        );

        getContentPane().add(jpSuperior, java.awt.BorderLayout.PAGE_START);

        jpRodape.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Agenda", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(0, 0, 153)));
        jpRodape.setToolTipText("Agenda");

        jtAgenda.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código", "Data", "Hora", "Cliente", "Tarefa", "Status", "Motorista", "Núm. OS."
            }
        ));
		jtAgenda.getColumnModel().getColumn(0).setPreferredWidth(40);colModelAgenda.getColumn(0).setCellRenderer(tcrDireta);
		jtAgenda.getColumnModel().getColumn(1).setPreferredWidth(60);colModelAgenda.getColumn(0).setCellRenderer(tcrDireta);
		jtAgenda.getColumnModel().getColumn(2).setPreferredWidth(40);colModelAgenda.getColumn(0).setCellRenderer(tcrDireta);
		jtAgenda.getColumnModel().getColumn(3).setPreferredWidth(100);
		jtAgenda.getColumnModel().getColumn(4).setPreferredWidth(50);
		jtAgenda.getColumnModel().getColumn(5).setPreferredWidth(50);
		jtAgenda.getColumnModel().getColumn(6).setPreferredWidth(100);
		jtAgenda.getColumnModel().getColumn(7).setPreferredWidth(50);colModelAgenda.getColumn(6).setCellRenderer(tcrDireta);
		    
        jScrollPane1.setViewportView(jtAgenda);

        javax.swing.GroupLayout jpRodapeLayout = new javax.swing.GroupLayout(jpRodape);
        jpRodape.setLayout(jpRodapeLayout);
        jpRodapeLayout.setHorizontalGroup(
            jpRodapeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpRodapeLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 604, Short.MAX_VALUE)
                .addContainerGap())
        );
        jpRodapeLayout.setVerticalGroup(
            jpRodapeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpRodapeLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(25, Short.MAX_VALUE))
        );

        getContentPane().add(jpRodape, java.awt.BorderLayout.PAGE_END);

        jpEsquerdo.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(null, "Calendário", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(0, 0, 153))));
        jpEsquerdo.setToolTipText("Calendário");

        jtAgenda.addMouseListener(new java.awt.event.MouseAdapter(){
        	public void mouseClicked(java.awt.event.MouseEvent evt){
        		jtAgendaMouseClicked(evt);
        	}
        });
        jmcMes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jmcMesMouseClicked(evt);
            }
        });
        jmcMes.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jmcMesPropertyChange(evt);
            }
        });

        jycAno.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jycAnoPropertyChange(evt);
            }
        });

        jdcDia.setMonth(jmcMes.getMonth());
        jdcDia.setYear(jycAno.getYear());
        jdcDia.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jdcDiaPropertyChange(evt);
            }
        });

        javax.swing.GroupLayout jpEsquerdoLayout = new javax.swing.GroupLayout(jpEsquerdo);
        jpEsquerdo.setLayout(jpEsquerdoLayout);
        jpEsquerdoLayout.setHorizontalGroup(
            jpEsquerdoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpEsquerdoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpEsquerdoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpEsquerdoLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jmcMes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jycAno, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jdcDia, javax.swing.GroupLayout.DEFAULT_SIZE, 299, Short.MAX_VALUE))
                .addContainerGap())
        );
        jpEsquerdoLayout.setVerticalGroup(
            jpEsquerdoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpEsquerdoLayout.createSequentialGroup()
                .addGroup(jpEsquerdoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jmcMes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jycAno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jdcDia, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 186, Short.MAX_VALUE))
        );

        getContentPane().add(jpEsquerdo, java.awt.BorderLayout.LINE_START);

        jpDireito.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Tarefa", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(0, 0, 153)));
        jpDireito.setToolTipText("Tarefa");

        jtTarefa.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código", "Tarefas"
            }
        ){
			Class[] types = new Class [] {
                    java.lang.String.class, java.lang.String.class
                };
                boolean[] canEdit = new boolean [] {
                    false, false
                };

                public Class getColumnClass(int columnIndex) {
                    return types [columnIndex];
                }

                public boolean isCellEditable(int rowIndex, int columnIndex) {
                    return canEdit [columnIndex];
                }
            }
        );
        jtTarefa.getColumnModel().getColumn(0).setPreferredWidth(30);colModelTarefa.getColumn(0).setCellRenderer(tcrDireta);
        jtTarefa.getColumnModel().getColumn(1).setPreferredWidth(70);
       
        jScrollPane2.setViewportView(jtTarefa);

        javax.swing.GroupLayout jpDireitoLayout = new javax.swing.GroupLayout(jpDireito);
        jpDireito.setLayout(jpDireitoLayout);
        jpDireitoLayout.setHorizontalGroup(
            jpDireitoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpDireitoLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jpDireitoLayout.setVerticalGroup(
            jpDireitoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        getContentPane().add(jpDireito, java.awt.BorderLayout.LINE_END);
        //CAMPOS PARA O AGENTAMENTO
        lblCodigo.setText("Código");

        lblValorCodigo.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblValorCodigo.setToolTipText("Código Agendamento");
        lblValorCodigo.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(0, 0, 153)));
        lblValorCodigo.setMaximumSize(new java.awt.Dimension(14, 20));
        lblValorCodigo.setMinimumSize(new java.awt.Dimension(14, 20));
        lblValorCodigo.setPreferredSize(new java.awt.Dimension(14, 20));

        lblDataAgendamento.setText("Data");

        try {
            jftDataAgendamento.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        jftDataAgendamento.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jftDataAgendamento.setMaximumSize(new java.awt.Dimension(6, 20));

        lblHora.setText("Hora");

        try {
            jftHora.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##:##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        jftHora.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        lblCliente.setText("Cliente");

//        jcbCliente.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jcbCliente.setMaximumSize(new java.awt.Dimension(56, 20));
        lblTarefa.setText("Tarefa");

//        jcbTarefa.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        lblStatus.setText("Situação");

        lblValorStatus.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(0, 0, 153)));
        lblValorStatus.setMaximumSize(new java.awt.Dimension(34, 20));
        lblValorStatus.setMinimumSize(new java.awt.Dimension(34, 20));
        lblValorStatus.setName("");
        lblValorStatus.setPreferredSize(new java.awt.Dimension(34, 20));

        lblMotorista.setText("Motorista");

//        jcbMotorista.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jcbMotorista.setMaximumSize(new java.awt.Dimension(56, 20));        

        lblNumeroOS.setText("Número OS");

        lblValorNumeroOS.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblValorNumeroOS.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(0, 0, 153)));
        lblValorNumeroOS.setMaximumSize(new java.awt.Dimension(38, 20));
        lblValorNumeroOS.setMinimumSize(new java.awt.Dimension(38, 20));
        lblValorNumeroOS.setPreferredSize(new java.awt.Dimension(38, 20));

        jtbBarraFerramentas.setFloatable(false);
        jtbBarraFerramentas.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jtbBarraFerramentas.setRollover(true);
        jtbBarraFerramentas.setToolTipText("Barra de Ferramentas");

        jbSalvar.setText("Salvar");
        jbSalvar.setFocusable(false);
        jbSalvar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbSalvar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jbSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSalvarActionPerformed(evt);
            }
        });
        jtbBarraFerramentas.add(jbSalvar);

        jbAtualizar.setText("Atualizar");
        jbAtualizar.setFocusable(false);
        jbAtualizar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbAtualizar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jbAtualizar.addActionListener(new java.awt.event.ActionListener(){
        	public void actionPerformed(java.awt.event.ActionEvent evt){
        		jbAtualizarActionPerformed(evt);
        	}
        });  
        jtbBarraFerramentas.add(jbAtualizar);

        jbImprimir.setText("Imprimir");
        jbImprimir.setFocusable(false);
        jbImprimir.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbImprimir.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jbImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbImprimirActionPerformed(evt);
            }
        });
        jtbBarraFerramentas.add(jbImprimir);
      
        TabAgenda_Old_New tabAgenda = new TabAgenda_Old_New(null, null);
        if(tabAgenda.botaoClicado == "btoNovo"){
        	jbSalvar.setEnabled(true); jbAtualizar.setEnabled(false); jbImprimir.setEnabled(false);
        	//tabAgenda.botaoClicado = "";
        }else if(TabAgenda_Old_New.botaoClicado == "btoAlterar"){
        	jbSalvar.setEnabled(false); jbAtualizar.setEnabled(true); jbImprimir.setEnabled(true);
        	//tabAgenda.botaoClicado = "";
        }
        pack();
    }// </editor-fold>

//    private void addWindowListener(WindowAdapter windowAdapter) {
//    	AgendamentoVO agendamentoVO = new AgendamentoVO();
//    	List<TarefaVO> tarefaVOs = new ArrayList<TarefaVO>();
//        List<AgendamentoVO> agendamentoVOs = new ArrayList<>();
//        try {
//            //CARREGA O GRID DE TAREFAS
//            tarefaVOs = new TarefaDAO().getAllTarefa();
//
//            modeloTarefa = (DefaultTableModel) this.jtTarefa.getModel();
//            modeloTarefa.setNumRows(0);
//            for(TarefaVO trVO : tarefaVOs){
//            	System.out.println("ID "+String.valueOf(trVO.getTarefaPk())+" Descrição "+trVO.getDescricaoTarefa());
//                modeloTarefa.addRow(new String[]{String.valueOf(trVO.getTarefaPk()), trVO.getDescricaoTarefa()});
//            }
//            jtTarefa.setModel(modeloTarefa);
//
//            //CARREGA O GRID DA AGENDA
//            agendamentoVO.setAno(Integer.valueOf(jycAno.getYear()));
//            agendamentoVOs = new AgendamentoDAO().getAllAgendamentoByAno(agendamentoVO);
//            
//            modeloAgenda = (DefaultTableModel) this.jtAgenda.getModel();
//            for(AgendamentoVO agVO : agendamentoVOs)
//                modeloAgenda.addRow(new String[]{String.valueOf(agVO.getAgendaPk()), new SimpleDateFormat("dd/MM/yyyy").format(agVO.getDataAgendada()), agVO.getHrAgendada(), agVO.getNomeCliente(), agVO.getNomeTarefa(), agVO.getStatusAgenda() });
//            jtAgenda.setModel(modeloAgenda); 
//        } catch (ClassNotFoundException | SQLException | IllegalAccessException | InstantiationException ex) {
//            Logger.getLogger(TabAgenda.class.getName()).log(Level.SEVERE, null, ex);
//        }finally{
//            try {
//                new TarefaDAO().getClosedConnection();
//            } catch (SQLException | ClassNotFoundException | IllegalAccessException | InstantiationException ex) {
//                Logger.getLogger(TabAgenda.class.getName()).log(Level.SEVERE, null, ex);
//            }
//        }
//		
//	}

	private void formInternalFrameActivated(javax.swing.event.InternalFrameEvent evt) {                                     
        AgendamentoVO agendamentoVO = new AgendamentoVO();
        try {
            //CARREGA O GRID DE TAREFAS
        	if(modTarefa){
	            List<TarefaVO> tarefaVO = new ArrayList<>();
	            tarefaVO = new TarefaDAO().getAllTarefa();
	
	            modeloTarefa = (DefaultTableModel) jtTarefa.getModel();
	            for(TarefaVO trVO : tarefaVO)
	                modeloTarefa.addRow(new String[]{String.valueOf(trVO.getTarefaPk()), trVO.getDescricaoTarefa()});
	            
	            modTarefa = false;
        	}
            //CARREGA O GRID DA AGENDA
        	if(modAgenda){
	            agendamentoVO.setAno(Integer.valueOf(jycAno.getYear()));
	            List<AgendamentoVO> agendamentoVOs = new ArrayList<>();
	            agendamentoVOs = new AgendamentoDAO().getAllAgendamentoByAno(agendamentoVO);
	            
	            modeloAgenda = (DefaultTableModel) jtAgenda.getModel();
	            for(AgendamentoVO agVO : agendamentoVOs)
	                modeloAgenda.addRow(new String[]{String.valueOf(agVO.getAgendaPk()), new SimpleDateFormat("dd/MM/yyyy").format(agVO.getDataAgendada()), agVO.getHrAgendada(), agVO.getNomeCliente(), agVO.getNomeTarefa(), agVO.getStatusAgenda() });
	            
	            modAgenda = false;

        	}
                        
        } catch (ClassNotFoundException | SQLException | IllegalAccessException | InstantiationException ex) {
            Logger.getLogger(TabAgenda_Old_New.class.getName()).log(Level.SEVERE, null, ex);
        }finally{
            try {
                new TarefaDAO().getClosedConnection();
            } catch (SQLException | ClassNotFoundException | IllegalAccessException | InstantiationException ex) {
                Logger.getLogger(TabAgenda_Old_New.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    
    }                            

    private void jmcMesMouseClicked(java.awt.event.MouseEvent evt) {                                    

    }
    
    private void jtAgendaMouseClicked(java.awt.event.MouseEvent evt) {
    	int linha = jtAgenda.getSelectedRow();
    	idAgenda = Integer.valueOf(jtAgenda.getValueAt(linha, 0).toString());
    }                                   

    private void jmcMesPropertyChange(java.beans.PropertyChangeEvent evt) {                                      
        if(evt.getPropertyName() == "month"){
            jdcDia.setMonth(jmcMes.getMonth());
            AgendamentoVO agendamentoVO = new AgendamentoVO();
            try {
                //CARREGA O GRID DA AGENDA CONFORME MUDANÇA NO MES DO CALENDARIO
                agendamentoVO.setMes(Integer.valueOf(jmcMes.getMonth()+1));
                agendamentoVO.setAno(Integer.valueOf(jycAno.getYear()));
                List<AgendamentoVO> agendamentoVOs = new ArrayList<>();
                agendamentoVOs = new AgendamentoDAO().getAllAgendamentoByMes(agendamentoVO);

                modeloAgenda = (DefaultTableModel) jtAgenda.getModel();
                modeloAgenda.setNumRows(0);
                if(!agendamentoVOs.equals(null)){
                	for(AgendamentoVO agVO : agendamentoVOs)
                		modeloAgenda.addRow(new String[]{String.valueOf(agVO.getAgendaPk()), new SimpleDateFormat("dd/MM/yyyy").format(agVO.getDataAgendada()), agVO.getHrAgendada(), agVO.getNomeCliente(), agVO.getNomeTarefa(), agVO.getStatusAgenda() });
                }
             } catch (ClassNotFoundException | SQLException | InstantiationException | IllegalAccessException ex) {
                 Logger.getLogger(TabAgenda_Old_New.class.getName()).log(Level.SEVERE, null, ex);
             }finally{
                 try {
                      new TarefaDAO().getClosedConnection();
                 } catch (SQLException | ClassNotFoundException | InstantiationException | IllegalAccessException ex) {
                      Logger.getLogger(TabAgenda_Old_New.class.getName()).log(Level.SEVERE, null, ex);
                 }
             }
        }
    }                                     

    private void jycAnoPropertyChange(java.beans.PropertyChangeEvent evt) {                                      
        if(evt.getPropertyName() == "year"){
        	jdcDia.setYear(jycAno.getYear());
        	System.out.println("ANO "+jycAno.getYear());
        	AgendamentoVO agendamentoVO = new AgendamentoVO();
	        try {
	            //CARREGA O GRID DA AGENDA CONFORME MUDANÇA DE ANO
	            agendamentoVO.setAno(Integer.valueOf(jycAno.getYear()));
	            agendamentoVO.setMes(Integer.valueOf(jmcMes.getMonth()+1));
	            List<AgendamentoVO> agendamentoVOs = new ArrayList<>();
	            agendamentoVOs = new AgendamentoDAO().getAllAgendamentoByAnoMes(agendamentoVO);
	            
	            modeloAgenda = (DefaultTableModel) jtAgenda.getModel();
                modeloAgenda.setNumRows(0);
	            if(!agendamentoVOs.equals(null)){
	            	for(AgendamentoVO agVO : agendamentoVOs)
	            		modeloAgenda.addRow(new String[]{String.valueOf(agVO.getAgendaPk()), new SimpleDateFormat("dd/MM/yyyy").format(agVO.getDataAgendada()), agVO.getHrAgendada(), agVO.getNomeCliente(), agVO.getNomeTarefa(), agVO.getStatusAgenda() });
	            }    
	        } catch (ClassNotFoundException | SQLException | InstantiationException | IllegalAccessException ex) {
	            Logger.getLogger(TabAgenda_Old_New.class.getName()).log(Level.SEVERE, null, ex);
	        }finally{
	            try {
	                new TarefaDAO().getClosedConnection();
	            } catch (SQLException | ClassNotFoundException | InstantiationException | IllegalAccessException ex) {
	                Logger.getLogger(TabAgenda_Old_New.class.getName()).log(Level.SEVERE, null, ex);
	            }
	        }
        }
    }                                     

    private void jdcDiaPropertyChange(java.beans.PropertyChangeEvent evt) {                                      
        if(evt.getPropertyName() == "day"){
        AgendamentoVO agendamentoVO = new AgendamentoVO();
        try {
            modeloAgenda.setNumRows(0);
            //CARREGA O GRID DA AGENDA CONFORME MUDANÇA DE DIA
            String dt = String.valueOf(jdcDia.getDay()+"/"+(jmcMes.getMonth() > 9 ? jmcMes.getMonth()+1 : ("0"+(jmcMes.getMonth()+1)))+"/"+String.valueOf(jycAno.getYear()));
            try {
				agendamentoVO.setDataAgendada(new ConvertStringToDate().convertStringToDates(dt));
			} catch (ParseException e) {
				e.printStackTrace();
			}
            List<AgendamentoVO> agendamentoVOs = new ArrayList<>();
            agendamentoVOs = new AgendamentoDAO().getAllAgendamentoByDia(agendamentoVO);
            
            modeloAgenda = (DefaultTableModel) jtAgenda.getModel();
            modeloAgenda.setNumRows(0);
            for(AgendamentoVO agVO : agendamentoVOs)
                modeloAgenda.addRow(new String[]{String.valueOf(agVO.getAgendaPk()), new SimpleDateFormat("dd/MM/yyyy").format(agVO.getDataAgendada()), agVO.getHrAgendada(), agVO.getNomeCliente(), agVO.getNomeTarefa(), agVO.getStatusAgenda() });
                        
        } catch (ClassNotFoundException | SQLException | InstantiationException | IllegalAccessException ex) {
            Logger.getLogger(TabAgenda_Old_New.class.getName()).log(Level.SEVERE, null, ex);
        }finally{
            try {
                new TarefaDAO().getClosedConnection();
            } catch (SQLException | ClassNotFoundException | InstantiationException | IllegalAccessException ex) {
                Logger.getLogger(TabAgenda_Old_New.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        }
    }
    //CONTROLA ACAO ODO BOTAO NOVO
    private void jbNovoActionPerformed(java.awt.event.ActionEvent evt) {
        botaoClicado = "btoNovo";
        CadAgendamento cadAgendamento = new CadAgendamento();
        ControlMoto.createInternalFrame(cadAgendamento, this.getDesktopPane());
        
     }
    //CONTROLA ACAO DO BOTAO ALTERAR
    private void jbAlterarActionPerformed(java.awt.event.ActionEvent evt) {
        if(idAgenda == null){
        	JOptionPane.showMessageDialog(this, "Selecione no grid agenda o compromisso e depois cliente em Alterar", "ControlMoto", JOptionPane.OK_OPTION);
        }else{
        	botaoClicado = "btoAlterar";
        	CadAgendamento cadAgendamento = new CadAgendamento();
        	ControlMoto.createInternalFrame(cadAgendamento, this.getDesktopPane());        	
        }
     }
    //CONTROLA ACAO DO BOTAO CANCELAR
    private void jbCancelarActionPerformed(java.awt.event.ActionEvent evt) {
        if(idAgenda == null){
        	JOptionPane.showMessageDialog(this, "Selecione no grid agenda o compromisso e depois cliente em Cancelar", "ControlMoto", JOptionPane.OK_OPTION);
        }else{
        	AgendamentoVO agendamentoVO = new AgendamentoVO();
        	botaoClicado = "btoCancelar";
        	agendamentoVO.setAgendaPk(idAgenda);
        	agendamentoVO.setStatusAgenda("Cancelado");
        	try {
				new AgendamentoDAO().getCancelaAgendamentoById(agendamentoVO);
			} catch (IllegalAccessException | InstantiationException | ClassNotFoundException | SQLException e) {
				e.printStackTrace();
			}
        }
        atualizaGridAgenda();
        JOptionPane.showMessageDialog(this, "Cancelamento realizado com sucesso", "ControlMoto", JOptionPane.OK_OPTION);
        CadAgendamento cadAgendamento = new CadAgendamento();
        ControlMoto.createInternalFrame(cadAgendamento, this.getDesktopPane());
     }
//
    //
    private void jbSalvarActionPerformed(java.awt.event.ActionEvent evt) {                                         
        AgendamentoVO agendamentoVO = new AgendamentoVO();
        agendamentoVO.setAgendaPk(Integer.valueOf(lblValorCodigo.getText()));
        if(jftDataAgendamento.getText() != "  /  /    "){
        	//ConvertStringToDate convStringToDate = new ConvertStringToDate()
        	//java.util.Date dt = new java.util.Date(new SimpleDateFormat("dd/MM/yyyy").format(jftDataAgendamento.getText()));
        	try {
				agendamentoVO.setDataAgendada(new ConvertStringToDate().convertStringToDates(jftDataAgendamento.getText()));
			} catch (ParseException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
        }
        if(jftHora.getText() != "  :  ")
			try {
				agendamentoVO.setHoraAgendada(new java.sql.Time(new SimpleDateFormat("HH:mm").parse(jftHora.getText()).getTime()));
			} catch (ParseException e1) {
				e1.printStackTrace();
			}
        agendamentoVO.setClienteAFk(Integer.valueOf(jcbCliente.getSelectedItem().toString().substring(0, jcbCliente.getSelectedItem().toString().indexOf("-")).trim()) );
        agendamentoVO.setNomeCliente(jcbCliente.getSelectedItem().toString().substring(jcbCliente.getSelectedItem().toString().indexOf("-")).replace("-", "").trim() );
        agendamentoVO.setTarefaAFk(Integer.valueOf(jcbTarefa.getSelectedItem().toString().substring(0, jcbTarefa.getSelectedItem().toString().indexOf("-")).trim()) );
        agendamentoVO.setNomeTarefa(jcbTarefa.getSelectedItem().toString().substring(jcbTarefa.getSelectedItem().toString().indexOf("-")).replace("-", "").trim() );
        agendamentoVO.setStatusAgenda(lblValorStatus.getText());
        if(jcbMotorista.getSelectedIndex() > 0){
        	agendamentoVO.setMotoristaAFk(jcbMotorista.getSelectedItem().toString().substring(0, jcbMotorista.getSelectedItem().toString().indexOf("-")).trim());
        	agendamentoVO.setNomeMotorista(jcbMotorista.getSelectedItem().toString().substring(jcbMotorista.getSelectedItem().toString().indexOf("-")).trim() );
        }
        
        try {
			new AgendamentoDAO().insertAgendamento(agendamentoVO);
		} catch (ClassNotFoundException | IllegalAccessException | InstantiationException | SQLException e){ 
			e.printStackTrace();
		}finally{
			try {
				new AgendamentoDAO().getConnectionClose();
//				limpaCampos();
//				CadAgendamento.this.dispose();
				
				TabAgenda_Old_New tabAgenda = new TabAgenda_Old_New(null, null);
				tabAgenda.atualizaGridAgenda();
			} catch (ClassNotFoundException | IllegalAccessException | InstantiationException | SQLException e) {
				e.printStackTrace();
			}
		}        
    }
    //
    private void jbAtualizarActionPerformed(java.awt.event.ActionEvent evt) {                                           
        AgendamentoVO agendamentoVO = new AgendamentoVO();
        agendamentoVO.setAgendaPk(Integer.valueOf(lblValorCodigo.getText()));
        if(jftDataAgendamento.getText() != "  /  /    "){
        	try {
				agendamentoVO.setDataAgendada(new ConvertStringToDate().convertStringToDates(jftDataAgendamento.getText()));
			} catch (ParseException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
        }
        if(jftHora.getText() != "  :  ")
			try {
				agendamentoVO.setHoraAgendada(new java.sql.Time(new SimpleDateFormat("HH:mm").parse(jftHora.getText()).getTime()));
			} catch (ParseException e1) {
				e1.printStackTrace();
			}
        agendamentoVO.setClienteAFk(Integer.valueOf(jcbCliente.getSelectedItem().toString().substring(0, jcbCliente.getSelectedItem().toString().indexOf("-")).trim()) );
        agendamentoVO.setNomeCliente(jcbCliente.getSelectedItem().toString().substring(jcbCliente.getSelectedItem().toString().indexOf("-")).replace("-", "").trim() );
        agendamentoVO.setTarefaAFk(Integer.valueOf(jcbTarefa.getSelectedItem().toString().substring(0, jcbTarefa.getSelectedItem().toString().indexOf("-")).trim()) );
        agendamentoVO.setNomeTarefa(jcbTarefa.getSelectedItem().toString().substring(jcbTarefa.getSelectedItem().toString().indexOf("-")).replace("-", "").trim() );
        agendamentoVO.setStatusAgenda(lblValorStatus.getText());
        if(jcbMotorista.getSelectedIndex() > 0){
        	agendamentoVO.setMotoristaAFk(jcbMotorista.getSelectedItem().toString().substring(0, jcbMotorista.getSelectedItem().toString().indexOf("-")).trim());
        	agendamentoVO.setNomeMotorista(jcbMotorista.getSelectedItem().toString().substring(jcbMotorista.getSelectedItem().toString().indexOf("-")).trim() );
        }
        
        try {
			new AgendamentoDAO().updateAgendamento(agendamentoVO);
		} catch (ClassNotFoundException | IllegalAccessException | InstantiationException | SQLException e){ 
			e.printStackTrace();
		}finally{
			try {
				new AgendamentoDAO().getConnectionClose();
				//limpaCampos();
				//CadAgendamento.this.dispose();
				
				TabAgenda_Old_New tabAgenda = new TabAgenda_Old_New(null, null);
//				tabAgenda.atualizaGridAgenda();
//				tabAgenda.modeloAgenda.addRow(arg0)
				AgendamentoVO agendamentVO = new AgendamentoVO();
		        try {
		        	agendamentVO.setAno(Integer.valueOf(jftDataAgendamento.getText().substring(6)));
		            List<AgendamentoVO> agendamentVOs = new ArrayList<>();

		            agendamentVOs = new AgendamentoDAO().getAllAgendamentoByAno(agendamentVO);		
		            tabAgenda.modeloAgenda = (DefaultTableModel) tabAgenda.jtAgenda.getModel();
		            tabAgenda.modeloAgenda.setNumRows(0);
		            for(AgendamentoVO agVO : agendamentVOs)
		            	tabAgenda.modeloAgenda.addRow(new String[]{String.valueOf(agVO.getAgendaPk()), new SimpleDateFormat("dd/MM/yyyy").format(agVO.getDataAgendada()), agVO.getHrAgendada(), agVO.getNomeCliente(), agVO.getNomeTarefa(), agVO.getStatusAgenda() });
		                       
				} catch (ClassNotFoundException | IllegalAccessException | InstantiationException | SQLException e) {
					e.printStackTrace();
				}
				
			} catch (ClassNotFoundException | IllegalAccessException | InstantiationException | SQLException e) {
				e.printStackTrace();
			}
		}

    }     
    //
    private void jbImprimirActionPerformed(java.awt.event.ActionEvent evt) {                                           
        // TODO add your handling code here:
    }
    //
    public void atualizaGridAgenda(){
    	AgendamentoVO agendamentoVO = new AgendamentoVO();
        try {
    		agendamentoVO.setAno(Integer.valueOf(jycAno.getYear()));
            List<AgendamentoVO> agendamentoVOs = new ArrayList<>();

			agendamentoVOs = new AgendamentoDAO().getAllAgendamentoByAno(agendamentoVO);		
            modeloAgenda = (DefaultTableModel) jtAgenda.getModel();
            modeloAgenda.setNumRows(0);
            for(AgendamentoVO agVO : agendamentoVOs)
                modeloAgenda.addRow(new String[]{String.valueOf(agVO.getAgendaPk()), new SimpleDateFormat("dd/MM/yyyy").format(agVO.getDataAgendada()), agVO.getHrAgendada(), agVO.getNomeCliente(), agVO.getNomeTarefa(), agVO.getStatusAgenda() });
                       
		} catch (ClassNotFoundException | IllegalAccessException | InstantiationException | SQLException e) {
			e.printStackTrace();
		}
    }
    
    private ControlMoto telaControlMoto;
    static int openFrameCount = 5;
    static final int xOffset = 25, yOffset = 1;
    static java.lang.String botaoClicado = null;
    static java.lang.Integer idAgenda = null;
    boolean modTarefa, modAgenda;
    
    //Variaveis para Tabela
    DefaultTableModel modeloTarefa, modeloAgenda;
    static CadAgendamento jifTelaCadAgendamento;
    JDesktopPane jDesktopPane;
    DefaultTableCellRenderer tcrDireta,tcrEsqueda,tcrCentro;
    TableColumnModel colModelAgenda, colModelTarefa;
    private javax.swing.JScrollPane jScrollPane1, jScrollPane2;
    private javax.swing.JButton jbAlterar, jbCancelar, jbNovo;
    private com.toedter.calendar.JDayChooser jdcDia;
    private com.toedter.calendar.JMonthChooser jmcMes;
    private javax.swing.JPanel jpDireito, jpEsquerdo, jpRodape, jpSuperior, jpSupAgendamento;
    public javax.swing.JTable jtAgenda, jtTarefa;
    private javax.swing.JToolBar jtbBarraFerramenta;
    private com.toedter.calendar.JYearChooser jycAno;
    private javax.swing.JButton jbAtualizar, jbImprimir, jbSalvar;
    private javax.swing.JComboBox jcbCliente, jcbMotorista, jcbTarefa;
    private javax.swing.JFormattedTextField jftDataAgendamento, jftHora;
    private javax.swing.JToolBar jtbBarraFerramentas;
    private javax.swing.JLabel lblCliente, lblCodigo, lblDataAgendamento, lblHora, lblMotorista, lblNumeroOS, lblStatus,
    lblTarefa, lblValorCodigo, lblValorNumeroOS, lblValorStatus;
    // End of variables declaration
}
