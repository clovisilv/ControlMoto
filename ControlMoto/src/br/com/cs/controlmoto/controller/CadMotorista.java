package br.com.cs.controlmoto.controller;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.File;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Timestamp;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.regex.PatternSyntaxException;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFormattedTextField;
import javax.swing.JInternalFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JSeparator;
import javax.swing.JTextField;
import javax.swing.JToolBar;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.MaskFormatter;
import javax.swing.text.PlainDocument;

import br.com.cs.controlmoto.domain.CadEnderecoDAO;
import br.com.cs.controlmoto.domain.CadMotoristaDAO;
import br.com.cs.controlmoto.domain.CadTelefoneDAO;
import br.com.cs.controlmoto.domain.ConnectionFactory;
import br.com.cs.controlmoto.utils.FixedLengthDocument;
import br.com.cs.controlmoto.utils.ValidadeHabilitacao;
import br.com.cs.controlmoto.vo.CadEnderecoVO;
import br.com.cs.controlmoto.vo.CadMotoristaVO;
import br.com.cs.controlmoto.vo.CadTelefoneVO;
/**
 * Company Fictec Cons. Inf.
 * @since 06/09/2012
 * @version 1.0.6
 * @author Clovis
 */

class CadMotorista extends JInternalFrame implements ActionListener, FocusListener, KeyListener {

	/**
	 * 
	 */
	private static final long serialVersionUID = 3322519713845032454L;
	
	private JToolBar jtbBarraFerramenta;
	
	private JPanel jpCampos, jpToolBar;

	private JLabel	lblCodigo, lblNome, lblRg, lblCpf, lblHabilitacao, lblCategoria, lblVencimento, lblDatanascimento, lblEndereco, lblNumero, lblBairro, lblCidade,
			lblEstado, lblCep, lblContato, lblTelefone, lblCelular, lblBanco, lblConta, lblAgencia, lblTipo, lblComissao, lblDatacadastro, lblInfoGerais,
			lblInfoEndereco, lblInfoContato, lblInfoBanco;

	private JTextField	txtCodigo, txtNome, txtEndereco, txtNumero, txtBairro, txtCidade, txtEstado, txtContato, txtBanco, txtConta, txtAgencia, txtTipo, txtComissao,
				txtDataCadastro;

	private JComboBox jcbTipoConta, jcbTipoEstado, jcbTipoBanco, jcbCategoria;

	private JFormattedTextField JtxtCodigo,JtxtRg,JtxtCpf,JtxtHabilitacao,JtxtVencimento,JtxtDataNascimento,JtxtCep,JtxtTelefone,JtxtCelular,JtxtDatacadastro;//JtxtCategoria,
	
	private JSeparator jsInfoGerais,jsInfoEndereco,jsInfoContato,jsInfoBanco;

	private JButton btoIncluir,btoLocalizar,btoGravar,btoExcluir,btoSair,btoAtualizar,btoCancelar;
	
	private ControlMoto telaControlMoto;

	String [] tipoBanco = {"","BMG","BOAVISTA","BANKBOSTON","BRASIL","BRADESCO","CACIQUE","CAIXA ECONOMICA FEDERAL","CIDADE","CITIBANK","BANESPA","EXCEL BANCO","FININVEST","FRANCES E BRASILEIRO","HSBC","ITAU","FINASA",
			"NOSSA CAIXA NOSSO BANCO","PANAMERICANO","PAULISTA","REAL","RURAL","SAFRA","BANCO DE SANTANDER","SANTISTA","SCHAIN CURY","SOFISA","SUDAMERIS BRASIL","SUMITOMO BRASILEIRO","TOKYO","UNIBANCO","VOTORANTIM"};
	String [] tipoConta = {"","CORRENTE","POUPANÇA"};
	String [] tipoEstado = {"","AC","AL","AP","AM","BA","CE","DF","ES","GO","MA","MT","MS","MG","PA","PB","PR",
			"PE","PI","RJ","RN","RS","RO","RR","SC","SP","SE","TO"};
	String [] categoria = {"","A","B","C","D"};

	String caminho =  "", separadorPath = "", comiss = "";
	Double comis, comissa;
	NumberFormat comissao;

	Connection minhaConexao;
	Statement minhaSTM;
	ResultSet rs;
	
	Date data, dataN, dataV;
    SimpleDateFormat sdf,sdfTimestamp;
    Timestamp timestamp,timestampN,timestampV;
    java.sql.Date dt;    
    int enderecoPk=0, telefonePk=0;
    //Serve para mover a tela interna
    static int openFrameCount = 2;
    static final int xOffset = 10, yOffset = 36;
	
	/** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
	public CadMotorista(String titulo, ControlMoto controlMoto){
    	super(titulo,false,true,false,true);
    	setSize(610,570);
    	setVisible(true);
    	setLocation(xOffset*openFrameCount, yOffset*openFrameCount);
    	
    	separadorPath = System.getProperty("file.separator");
    	caminho = new File("").getAbsolutePath();
    	
    	this.telaControlMoto = telaControlMoto;
    	controlMoto.jDesktopPane.add(this);
    	
		jpCampos = new JPanel(); jpToolBar = new JPanel();

		GridBagConstraints cons = new GridBagConstraints();
		//Container jpCampos = getContentPane();
		GridBagLayout layout = new GridBagLayout();
		jpCampos.setLayout(layout);

		cons.insets = new Insets (3,5,3,5); 
		cons.weightx = 0.30;cons.weighty = 0.30;

		comissao = NumberFormat.getNumberInstance(new Locale("",""));
		comissao.setMinimumFractionDigits(2);comissao.setMaximumFractionDigits(2);
		
		jtbBarraFerramenta = new JToolBar();
		jtbBarraFerramenta.setFloatable(false);
		jtbBarraFerramenta.setOrientation(javax.swing.SwingConstants.VERTICAL);

		lblCodigo = new JLabel("Código");lblNome = new JLabel("Nome");lblRg = new JLabel("RG");lblCpf = new JLabel("CPF");
		lblHabilitacao = new JLabel("Habilitação");lblCategoria = new JLabel("Categoria");lblVencimento = new JLabel("Vencimento");
		lblDatanascimento = new JLabel("Data de Nascimento");lblEndereco = new JLabel("Endereço");lblNumero = new JLabel("Número");
		lblBairro = new JLabel("Bairro");lblCidade = new JLabel("Cidade");lblEstado = new JLabel("Estado");lblCep = new JLabel("CEP");
		lblTelefone = new JLabel ("Telefone");lblCelular = new JLabel("Celular");lblBanco = new JLabel("Banco");lblAgencia = new JLabel("Agência");
		lblConta = new JLabel("Conta Número");lblTipo = new JLabel("Tipo da Conta");lblComissao = new JLabel("Comissão");lblDatacadastro = new JLabel("Data do Cadastro");
		lblInfoGerais = new JLabel("Informações Gerias");lblInfoEndereco = new JLabel("Informações de Localização");
		lblInfoContato = new JLabel("Informações de Contato");lblInfoBanco = new JLabel("Informações Bancária");

		txtCodigo = new JTextField();txtCodigo.setDocument(new MeuDocument());txtCodigo.setDocument(new FixedLengthDocument(8));
		txtNome = new JTextField();txtNome.setDocument(new MeuDocument());txtNome.setDocument(new FixedLengthDocument(50));
		txtEndereco = new JTextField();txtEndereco.setDocument(new MeuDocument());txtEndereco.setDocument(new FixedLengthDocument(60));
		txtNumero = new JTextField();txtNumero.setDocument(new MeuDocument());txtNumero.setDocument(new FixedLengthDocument(6));
		txtBairro = new JTextField();txtBairro.setDocument(new MeuDocument());txtBairro.setDocument(new FixedLengthDocument(30));
		txtCidade = new JTextField();txtCidade.setDocument(new MeuDocument());txtCidade.setDocument(new FixedLengthDocument(20));
		txtEstado = new JTextField();txtEstado.setDocument(new MeuDocument());txtEstado.setDocument(new FixedLengthDocument(2));
		txtBanco = new JTextField();txtBanco.setDocument(new MeuDocument());txtBanco.setDocument(new FixedLengthDocument(20));
		txtAgencia = new JTextField();txtAgencia.setDocument(new FixedLengthDocument(6));
		txtConta = new JTextField();txtConta.setDocument(new FixedLengthDocument(8));
		txtTipo = new JTextField();txtTipo.setDocument(new MeuDocument());
		txtComissao = new JTextField();txtComissao.setDocument(new MeuDocument());txtComissao.setDocument(new FixedLengthDocument(8));
		txtDataCadastro = new JTextField();txtDataCadastro.setDocument(new MeuDocument());txtDataCadastro.setDocument(new FixedLengthDocument(10));

		jcbTipoConta = new JComboBox(tipoConta);

		JtxtCodigo = new JFormattedTextField(setMascara("### ####"));JtxtCodigo.setDocument(new FixedLengthDocument(8));
		JtxtRg = new JFormattedTextField(setMascara("##.###.###-#"));JtxtRg.setDocument(new FixedLengthDocument(12));
		JtxtCpf = new JFormattedTextField(setMascara("###.###.###-##"));JtxtCpf.setDocument(new FixedLengthDocument(14));
		JtxtHabilitacao = new JFormattedTextField(setMascara("##.###.###.###"));JtxtHabilitacao.setDocument(new FixedLengthDocument(15));
//		JtxtCategoria = new JFormattedTextField(setMascara("##.###"));
		JtxtVencimento = new JFormattedTextField(setMascara("##/##/####"));JtxtVencimento.setDocument(new FixedLengthDocument(10));
		JtxtDataNascimento = new JFormattedTextField(setMascara("##/##/####"));JtxtDataNascimento.setDocument(new FixedLengthDocument(10));
		JtxtCep = new JFormattedTextField(setMascara("#####-###"));JtxtCep.setDocument(new FixedLengthDocument(9));
		JtxtTelefone = new JFormattedTextField(setMascara("(##) ####-####"));JtxtTelefone.setDocument(new FixedLengthDocument(14));
		JtxtCelular = new JFormattedTextField(setMascara("(##) ####-####"));JtxtCelular.setDocument(new FixedLengthDocument(14));
//		JtxtDatacadastro = new JFormattedTextField(setMascara("##/##/####"));
		
		jcbTipoBanco = new JComboBox(tipoBanco);
		jcbTipoConta = new JComboBox(tipoConta);
		jcbTipoEstado = new JComboBox(tipoEstado);
		jcbCategoria = new JComboBox(categoria);
		
		jsInfoGerais = new JSeparator();jsInfoEndereco = new JSeparator();jsInfoContato = new JSeparator();
		jsInfoBanco = new JSeparator();
		
//		jXDPDataCadastro = new JXDatePicker();

		btoIncluir = new JButton(); btoIncluir.setMnemonic(KeyEvent.VK_I); btoIncluir.setToolTipText("Incluir");
		btoIncluir.setIcon(new ImageIcon(caminho + separadorPath + "imagens" + separadorPath + "icone" + separadorPath + "hd_folha_novo_32x32.png"));
		
		btoLocalizar = new JButton(); btoLocalizar.setMnemonic(KeyEvent.VK_L); btoLocalizar.setToolTipText("Localizar");
		btoLocalizar.setIcon(new ImageIcon(caminho + separadorPath + "imagens" + separadorPath + "icone" + separadorPath + "hd_lupa_32x32.png"));
		
		btoGravar = new JButton(); btoGravar.setMnemonic(KeyEvent.VK_G); btoGravar.setToolTipText("Gravar");
		btoGravar.setIcon(new ImageIcon(caminho + separadorPath + "imagens"	+ separadorPath + "icone" + separadorPath + "hd_flopy_32x32.png"));
		
		btoExcluir =  new JButton(); btoExcluir.setMnemonic(KeyEvent.VK_E); btoExcluir.setToolTipText("Excluir");
		btoExcluir.setIcon(new ImageIcon(caminho + separadorPath + "imagens" + separadorPath + "icone" + separadorPath + "lixeira_32x32.png"));
		
		btoSair = new JButton(); btoSair.setMnemonic(KeyEvent.VK_S); btoSair.setToolTipText("Sair");
		btoSair.setIcon(new ImageIcon(caminho + separadorPath + "imagens" + separadorPath + "icone" + separadorPath	+ "cancelar_circular_32x32.png"));
		
		btoAtualizar = new JButton(); btoAtualizar.setMnemonic(KeyEvent.VK_A); btoAtualizar.setToolTipText("Atualizar");
		btoAtualizar.setIcon(new ImageIcon(caminho + separadorPath + "imagens" + separadorPath + "icone" + separadorPath	+ "hd_atualiza_32x32.png"));
		
		btoCancelar = new JButton(); btoCancelar.setMnemonic(KeyEvent.VK_C); btoCancelar.setToolTipText("Cancelar");
		btoCancelar.setIcon(new ImageIcon(caminho + separadorPath + "imagens" + separadorPath + "icone" + separadorPath + "hd_cancela_32x32.png"));
		
		sdf = new SimpleDateFormat("dd/MM/yyyy");

		cons.anchor = GridBagConstraints.NORTHWEST;
		
		/* INFORMACOES GERAIS DO MOTORISTAS COMO NOME, DOCUMENTOS, PLACA DO VEÍCULO */
		cons.gridx = 1;cons.gridy = 1;cons.gridwidth = 3;cons.ipadx = 70;
		lblInfoGerais.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		lblInfoGerais.setForeground(Color.BLUE);
		jpCampos.add(lblInfoGerais,cons);
		cons.gridx = 1;cons.gridy = 2;cons.gridwidth = 10;cons.ipadx = 550;
		jpCampos.add(jsInfoGerais,cons);
				
		cons.gridx = 1;cons.gridy = 3;cons.gridwidth = 2;cons.ipadx = 30;
		jpCampos.add(lblCodigo,cons);
		cons.gridx = 2;cons.gridy = 3;cons.gridwidth = 2;cons.ipadx = 80;cons.ipady = 1;
		txtCodigo.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		jpCampos.add(txtCodigo,cons);txtCodigo.setNextFocusableComponent(txtNome);
		txtCodigo.addFocusListener(this);

		cons.gridx = 1;cons.gridy = 4;cons.gridwidth = 1;cons.ipadx = 30;
		jpCampos.add(lblNome,cons);
		cons.gridx = 2;cons.gridy = 4;cons.gridwidth = 9;cons.ipadx = 450;
		jpCampos.add(txtNome,cons);txtNome.setNextFocusableComponent(JtxtRg);
		txtNome.addFocusListener(this);

		cons.gridx = 1;	cons.gridy = 5;cons.gridwidth = 1;cons.ipadx = 30;
		jpCampos.add(lblRg,cons);
		cons.gridx = 2;cons.gridy = 5;cons.gridwidth = 2;cons.ipadx = 110;
		JtxtRg.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		jpCampos.add(JtxtRg,cons);JtxtRg.setNextFocusableComponent(JtxtCpf);
		JtxtRg.addFocusListener(this);

		cons.gridx = 6;cons.gridy = 5;cons.gridwidth = 1;cons.ipadx = 20;
//		lblCpf.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		jpCampos.add(lblCpf,cons);
		cons.gridx = 7;cons.gridy = 5;cons.gridwidth = 2;cons.ipadx = 110;
		JtxtCpf.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		jpCampos.add(JtxtCpf,cons);JtxtCpf.setNextFocusableComponent(JtxtHabilitacao);
		JtxtCpf.addFocusListener(this);

		cons.gridx = 1;cons.gridy = 6;cons.gridwidth = 1;cons.ipadx = 30;
		jpCampos.add(lblHabilitacao,cons);
		cons.gridx = 2;cons.gridy = 6;cons.gridwidth = 2;cons.ipadx = 110;
		JtxtHabilitacao.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		jpCampos.add(JtxtHabilitacao,cons);JtxtHabilitacao.setNextFocusableComponent(jcbCategoria);
		JtxtHabilitacao.addFocusListener(this);

		cons.gridx = 6;cons.gridy = 6;cons.gridwidth = 1;cons.ipadx = 20;
//		lblCategoria.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		jpCampos.add(lblCategoria,cons);
		cons.gridx = 7;cons.gridy = 6;cons.gridwidth = 2;cons.ipadx = 75;
		jpCampos.add(jcbCategoria,cons);jcbCategoria.setNextFocusableComponent(JtxtVencimento);
		jcbCategoria.addFocusListener(this);

		cons.gridx = 1;cons.gridy = 7;cons.gridwidth = 1;cons.ipadx = 30;
		jpCampos.add(lblVencimento,cons);
		cons.gridx = 2;cons.gridy = 7;cons.gridwidth = 2;cons.ipadx = 110;
		JtxtVencimento.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		jpCampos.add(JtxtVencimento,cons);JtxtVencimento.setNextFocusableComponent(JtxtDataNascimento);
		JtxtVencimento.addFocusListener(this);

		cons.gridx = 6;cons.gridy = 7;cons.gridwidth = 1;cons.ipadx = 20;
//		lblDatanascimento.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		jpCampos.add(lblDatanascimento,cons);
		cons.gridx = 7;cons.gridy = 7;cons.gridwidth = 2;cons.ipadx = 110;
		JtxtDataNascimento.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		jpCampos.add(JtxtDataNascimento,cons);JtxtDataNascimento.setNextFocusableComponent(txtComissao);
		JtxtDataNascimento.addFocusListener(this);
		
		cons.gridx = 1;cons.gridy = 8;cons.gridwidth = 1;cons.ipadx = 30;
		jpCampos.add(lblComissao,cons);
		cons.gridx = 2;cons.gridy = 8;cons.gridwidth = 1;cons.ipadx = 70;
		txtComissao.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		jpCampos.add(txtComissao,cons);txtComissao.setNextFocusableComponent(txtDataCadastro);
		txtComissao.addFocusListener(this);

		cons.gridx = 6;cons.gridy = 8;cons.gridwidth = 1;cons.ipadx = 20;
//		lblDatacadastro.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		jpCampos.add(lblDatacadastro,cons);
		cons.gridx = 7;cons.gridy = 8;cons.gridwidth = 2;cons.ipadx = 110;
		txtDataCadastro.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		jpCampos.add(txtDataCadastro,cons);txtDataCadastro.setNextFocusableComponent(JtxtCep);
		txtDataCadastro.addFocusListener(this);
		
		/* INFORMACOES DE LOCALIZACAO DO MOTORISTA */
		cons.gridx = 1;cons.gridy = 9;cons.gridwidth = 4;cons.ipadx = 70;
		lblInfoEndereco.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		lblInfoEndereco.setForeground(Color.BLUE);
		jpCampos.add(lblInfoEndereco,cons);
		cons.gridx = 1;cons.gridy = 10;cons.gridwidth = 10;cons.ipadx = 550;
		jpCampos.add(jsInfoEndereco,cons);

//		cons.fill = GridBagConstraints.HORIZONTAL;
		cons.gridx = 1;cons.gridy = 11;cons.gridwidth = 1;cons.ipadx = 30;
		jpCampos.add(lblCep,cons);
//		lblCep.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		cons.gridx = 2;cons.gridy = 11;cons.gridwidth = 2;cons.ipadx = 80;
		JtxtCep.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		jpCampos.add(JtxtCep,cons);JtxtCep.setNextFocusableComponent(txtEndereco);
		JtxtCep.addFocusListener(this);

		cons.gridx = 1;cons.gridy = 12;cons.gridwidth = 1;cons.ipadx = 30;
		jpCampos.add(lblEndereco,cons);
		cons.gridx = 2;cons.gridy = 12;cons.gridwidth = 9;cons.ipadx = 450;
		jpCampos.add(txtEndereco,cons);txtEndereco.setNextFocusableComponent(txtNumero);
		txtEndereco.addFocusListener(this);

		cons.gridx = 1;cons.gridy = 13;cons.gridwidth = 1;cons.ipadx = 30;
		jpCampos.add(lblNumero,cons);
		cons.gridx = 2;cons.gridy = 13;cons.gridwidth = 1;cons.ipadx = 50;
		jpCampos.add(txtNumero,cons);txtNumero.setNextFocusableComponent(txtBairro);
		txtNumero.addFocusListener(this);
		
		cons.gridx = 4;cons.gridy = 13;cons.gridwidth = 1;cons.ipadx = 10;
		jpCampos.add(lblBairro,cons);
		cons.gridx = 5;cons.gridy = 13;cons.gridwidth = 3;cons.ipadx = 300;
		jpCampos.add(txtBairro,cons);txtBairro.setNextFocusableComponent(txtCidade);
		txtBairro.addFocusListener(this);

		cons.gridx = 1;cons.gridy = 14;cons.gridwidth = 1;cons.ipadx = 30;
//		lblCidade.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		jpCampos.add(lblCidade,cons);
		cons.gridx = 2;cons.gridy = 14;cons.gridwidth = 2;cons.ipadx = 110;
		jpCampos.add(txtCidade,cons);txtCidade.setNextFocusableComponent(jcbTipoEstado);
		txtCidade.addFocusListener(this);

		cons.gridx = 6;cons.gridy = 14;cons.gridwidth = 1;cons.ipadx = 10;
		jpCampos.add(lblEstado,cons);
		cons.gridx = 7;cons.gridy = 14;cons.gridwidth = 1;cons.ipadx = 75;
//		txtEstado.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		jpCampos.add(jcbTipoEstado,cons);txtEstado.setNextFocusableComponent(JtxtTelefone);
		txtEstado.addFocusListener(this);
		
		/*INFORMACOES PARA CONTACTAR O MOTORISTA POR TELEFONE*/
		cons.gridx = 1;cons.gridy = 15;cons.gridwidth = 4;cons.ipadx = 70;
		lblInfoContato.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		lblInfoContato.setForeground(Color.BLUE);
		jpCampos.add(lblInfoContato,cons);
		cons.gridx = 1;cons.gridy = 16;cons.gridwidth = 10;cons.ipadx = 550;
		jpCampos.add(jsInfoContato,cons);
		
		cons.gridx = 1;cons.gridy = 17;cons.gridwidth = 1;cons.ipadx = 30;
		jpCampos.add(lblTelefone,cons);
		cons.gridx = 2;cons.gridy = 17;cons.gridwidth = 2;cons.ipadx = 110;
		JtxtTelefone.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		jpCampos.add(JtxtTelefone,cons);JtxtTelefone.setNextFocusableComponent(JtxtCelular);
		JtxtTelefone.addFocusListener(this);

		cons.gridx = 6;cons.gridy = 17;cons.gridwidth = 1;cons.ipadx = 20;
//		lblCelular.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		jpCampos.add(lblCelular,cons);
		cons.gridx = 7;cons.gridy = 17;cons.gridwidth = 2;cons.ipadx = 110;
		JtxtCelular.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		jpCampos.add(JtxtCelular,cons);JtxtCelular.setNextFocusableComponent(jcbTipoBanco);
		JtxtCelular.addFocusListener(this);
		
		/* INFORMACOES BANCARIAS DO MOTORISTA */
		cons.gridx = 1;cons.gridy = 18;cons.gridwidth = 3;cons.ipadx = 70;
		lblInfoBanco.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		lblInfoBanco.setForeground(Color.BLUE);
		jpCampos.add(lblInfoBanco,cons);
		cons.gridx = 1;cons.gridy = 19;cons.gridwidth = 10;cons.ipadx = 550;
		jpCampos.add(jsInfoBanco,cons);

		cons.gridx = 1;cons.gridy = 20;cons.gridwidth = 1;cons.ipadx = 30;
		jpCampos.add(lblBanco,cons);
		cons.gridx = 2;cons.gridy = 20;cons.gridwidth = 3;cons.ipadx = 25;
		jpCampos.add(jcbTipoBanco,cons);txtBanco.setNextFocusableComponent(jcbTipoConta);
		//txtBanco.addFocusListener(this);
		
		cons.gridx = 6;cons.gridy = 20;cons.gridwidth = 1;cons.ipadx = 20;
//		lblTipo.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		jpCampos.add(lblTipo,cons);
		cons.gridx = 7;cons.gridy = 20;cons.gridwidth = 2;cons.ipadx = 30;cons.ipady = 1;
		jpCampos.add(jcbTipoConta,cons);txtTipo.setNextFocusableComponent(txtAgencia);
		//txtTipo.addFocusListener(this);

		cons.gridx = 1;cons.gridy = 21;	cons.gridwidth = 1;cons.ipadx = 30;
//		lblAgencia.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		jpCampos.add(lblAgencia,cons);
		cons.gridx = 2;cons.gridy = 21;cons.gridwidth = 1;cons.ipadx = 110;
		txtAgencia.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		jpCampos.add(txtAgencia,cons);txtAgencia.setNextFocusableComponent(txtConta);
		txtAgencia.addFocusListener(this);

		cons.gridx = 6;cons.gridy = 21;cons.gridwidth = 1;cons.ipadx = 20;
		jpCampos.add(lblConta,cons);
		cons.gridx = 7;cons.gridy = 21;cons.gridwidth = 3;cons.ipadx = 110;
		txtConta.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		jpCampos.add(txtConta,cons);//txtConta.setNextFocusableComponent(txtTipo);
		txtConta.addFocusListener(this);

//		cons.gridx = 4;cons.gridy = 14;cons.gridwidth = 1;cons.ipadx = 10;
//		lblDatacadastro.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
//		jpCampos.add(lblDatacadastro,cons);
//		cons.gridx = 5;cons.gridy = 14;cons.gridwidth = 2;cons.ipadx = 20;
//		JtxtDatacadastro.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
//		jpCampos.add(jXDPDataCadastro,cons);
//		jXDPDataCadastro.addFocusListener(this);

		cons.anchor = GridBagConstraints.EAST; cons.fill = GridBagConstraints.BOTH;
		cons.gridx = 20;cons.gridy = 3;cons.gridwidth = 1;cons.ipadx = 40;
		
		btoIncluir.setNextFocusableComponent(btoLocalizar);
		jtbBarraFerramenta.add(btoIncluir, cons); btoIncluir.addActionListener(this);

		cons.gridx = 20;cons.gridy = 4;cons.gridwidth = 1;cons.gridheight = 1;cons.ipadx = 60;
		btoGravar.setNextFocusableComponent(btoCancelar);
		jtbBarraFerramenta.add(btoGravar, cons); btoGravar.addActionListener(this);

		cons.gridx = 20;cons.gridy = 5;cons.gridwidth = 1;cons.gridheight = 1;cons.ipadx = 60;
		btoLocalizar.setNextFocusableComponent(btoSair);
		jtbBarraFerramenta.add(btoLocalizar, cons); btoLocalizar.addActionListener(this);

		cons.gridx = 20;cons.gridy = 6;cons.gridwidth = 1;cons.gridheight = 1;cons.ipadx = 60;
		btoAtualizar.setNextFocusableComponent(btoExcluir);
		jtbBarraFerramenta.add(btoAtualizar, cons); btoAtualizar.addActionListener(this);

		cons.gridx = 20;cons.gridy = 7;cons.gridwidth = 1;cons.gridheight = 1;cons.ipadx = 60;
		btoExcluir.setNextFocusableComponent(btoCancelar);
		jtbBarraFerramenta.add(btoExcluir, cons); btoExcluir.addActionListener(this);

		cons.gridx = 20;cons.gridy = 8;cons.gridwidth = 1;cons.gridheight = 1;cons.ipadx = 60;
		jtbBarraFerramenta.add(btoCancelar, cons); btoCancelar.addActionListener(this);

		cons.gridx = 20;cons.gridy = 9;cons.gridwidth = 1;cons.gridheight = 1;cons.ipadx = 60;
		btoSair.setNextFocusableComponent(txtCodigo);
		jtbBarraFerramenta.add(btoSair, cons); btoSair.addActionListener(this);

		btoIncluir.setEnabled(true); btoGravar.setEnabled(false); btoLocalizar.setEnabled(true); btoAtualizar.setEnabled(false);
		btoExcluir.setEnabled(false); btoSair.setEnabled(true); btoCancelar.setEnabled(false);
		
		jpToolBar.add(jtbBarraFerramenta);
		
		getContentPane().add(jpCampos, BorderLayout.CENTER );
		getContentPane().add(jtbBarraFerramenta, BorderLayout.EAST );

		}

	public void keyPressed(KeyEvent c) {

//		if(c.getSource() == txtCodigo){
//		try{
//		Pattern pattern = Pattern.compile("[A-Z]{3,3}");
//		Matcher matcher = pattern.matcher(txtCodigo.getText());
//		while(matcher.find())
//		//boolean isValid = matcher.matches();
//		//if(isValid){
//		System.out.println("A validação é verdade");
//		//}else{
//		//System.out.println("A validação e falsa");
//		//}
//		}catch(PatternSyntaxException pse){
//		pse.printStackTrace();
//		}
//		}

	}
	public void keyReleased(KeyEvent arg0) {
	}
	public void keyTyped(KeyEvent arg0) {
	}

	public void focusGained(FocusEvent m){
		if(m.getSource()==txtCodigo ){txtCodigo.selectAll();}
		if(m.getSource()==txtNome ){txtNome.selectAll();}
		if(m.getSource()==JtxtRg){JtxtRg.selectAll();}
		if(m.getSource()==JtxtCpf){JtxtCpf.selectAll();}
		if(m.getSource()==JtxtHabilitacao){JtxtHabilitacao.selectAll();}
//		if(m.getSource()==jcbCategoria){jcbCategoria.selectAll();}
		if(m.getSource()==JtxtVencimento){JtxtVencimento.selectAll();}
		if(m.getSource()==JtxtDataNascimento){JtxtDataNascimento.selectAll();}
		if(m.getSource()==txtEndereco){txtEndereco.selectAll();}
		if(m.getSource()==txtBairro){txtBairro.selectAll();}
		if(m.getSource()==txtCidade){txtCidade.selectAll();}
		if(m.getSource()==txtEstado){txtEstado.selectAll();}
		if(m.getSource()==JtxtCep){JtxtCep.selectAll();}
		if(m.getSource()==JtxtTelefone){JtxtTelefone.selectAll();}
		if(m.getSource()==JtxtCelular){JtxtCelular.selectAll();}
		if(m.getSource()==txtBanco){txtBanco.selectAll();}
		if(m.getSource()==txtBairro){txtBairro.selectAll();}
		if(m.getSource()==txtAgencia){txtAgencia.selectAll();}
		if(m.getSource()==txtConta){txtConta.selectAll();}
		if(m.getSource()==txtTipo){txtTipo.selectAll();}
		if(m.getSource()==txtComissao){txtComissao.selectAll();}
		if(m.getSource() == txtDataCadastro) {
			txtDataCadastro.selectAll();
			if (txtDataCadastro.getText().equals("")) {
				data = new Date();
				txtDataCadastro.setText(""+ sdf.format(data));
				dataV  =  new Date(JtxtVencimento.getText());
				dataN =  new Date(JtxtDataNascimento.getText());
				timestamp = new Timestamp(data.getTime());
				timestampV = new Timestamp(dataV.getTime());
				timestampN = new Timestamp(dataN.getTime());
			}
		}
		if(m.getSource() == JtxtDatacadastro){
//			String str = JtxtDatacadastro.getText().replace(" ", "a").replace("/", "a");
//						
//			if(JtxtDatacadastro.getValue() == null){
//			Date data = new Date();
//			int dia = data.getDate();int mes = data.getMonth();	int ano = data.getYear();
//			String dataAtual = (dia+"/"+(mes+1)+"/"+(ano+1900));
//			JtxtDatacadastro.setText(dataAtual);
//			}
		}
	}
	//Implementacao dos metodos depois de perder o foco
	public void focusLost(FocusEvent m){
		if(m.getSource()== txtComissao){
			if (txtComissao.getText() != null){
				try{
				comiss = txtComissao.getText().replace(",", ".");
				comis = Double.parseDouble(comiss);
				txtComissao.setText(""+comissao.format(comis));
				}catch(NumberFormatException nfe){}
			}
		}

		if(m.getSource() == txtCodigo){
			if(!txtCodigo.getText().isEmpty())
				txtCodigo.setText(txtCodigo.getText().toUpperCase());
		}

		if(m.getSource() == txtNome){
			if(!txtCodigo.getText().isEmpty()){
				try{
					txtCodigo.selectAll();
					Pattern pattern = Pattern.compile("[A-Z]{3,3}[ ][0-9]{4,4}");
					Matcher matcher = pattern.matcher(txtCodigo.getText());
					boolean isValid = matcher.matches();
					if(!isValid){
						JOptionPane.showMessageDialog(this,"Este código não é permitido!\n Ex.: AAA 1212.", "Moto Expores", JOptionPane.INFORMATION_MESSAGE);
						txtCodigo.requestFocus();
					}
				}catch(PatternSyntaxException pse){
					pse.printStackTrace();
				}
			}else{
				JOptionPane.showMessageDialog(this,"O código não pode ser vázio!\n Ex.: AAA 1212.", "Moto Expores", JOptionPane.INFORMATION_MESSAGE);
			}
		}

		if(m.getSource() == JtxtDatacadastro){
			if(btoGravar.isEnabled()){
				JtxtDatacadastro.setNextFocusableComponent(btoGravar);
			}
			if (btoIncluir.isEnabled()){
				JtxtDatacadastro.setNextFocusableComponent(btoIncluir);
			}
			if(btoAtualizar.isEnabled()){
				JtxtDatacadastro.setNextFocusableComponent(btoAtualizar);				
			}
		}
		
		if(m.getSource() == JtxtCep){
			try{
				if(!JtxtCep.getText().equals("     -   ")){
					CadEnderecoVO enderecoVO = new CadEnderecoVO();
					enderecoVO.setCep(JtxtCep.getText());
					CadEnderecoDAO enderecoDAO = new CadEnderecoDAO();
					try {
						enderecoDAO.readEnderecoByCep(enderecoVO);
					} catch (InstantiationException | IllegalAccessException e) {
						e.printStackTrace();
					}
					
					enderecoPk = enderecoVO.getEnderecoPk();
					txtEndereco.setText(enderecoVO.getEndereco());
					txtBairro.setText(enderecoVO.getBairro());
					txtCidade.setText(enderecoVO.getCidade());
					jcbTipoEstado.setSelectedItem(enderecoVO.getEstado());
					
					if(enderecoVO.getEnderecoPk() == null){
						txtEndereco.requestFocus();
					}else{
						txtNumero.requestFocus();
						}
				}else{
					JOptionPane.showMessageDialog(this,"Campo cep está vázio.\nDigite o cep.","ControlMoto",JOptionPane.INFORMATION_MESSAGE);
					JtxtCep.requestFocus();
				}
			} catch (SQLException e) {
				JOptionPane.showMessageDialog(this,"CEP não localizada.\nDigite seu endereço.","ControlMoto",JOptionPane.INFORMATION_MESSAGE);
			}
		}
		//Verifica o vencimento da habilitacao
		if(m.getSource() == JtxtVencimento){
			ValidadeHabilitacao valHab = new ValidadeHabilitacao();
			boolean valida = valHab.verificarValidadeHabilitacao(JtxtVencimento.getText());
			if(valida==false){
				JOptionPane.showMessageDialog(this,"Habilitação está vencida ou vence hoje!","ControlMoto", JOptionPane.INFORMATION_MESSAGE);
				//JtxtVencimento.requestFocus();
			}
		}
		//Verifica a idade do motorista
		if(m.getSource() == JtxtDataNascimento){
			ValidadeHabilitacao valHab = new ValidadeHabilitacao();
			boolean valida = valHab.calularIdade(JtxtDataNascimento.getText());
			if(valida==false){
				JOptionPane.showMessageDialog(this,"O motorista é menor de idade!!!","ControlMoto", JOptionPane.INFORMATION_MESSAGE);
				JtxtDataNascimento.requestFocus();
			}
		}
	}
	//Implementacao dos metodos ActionPerformed
	public void actionPerformed(ActionEvent m){
		if (m.getSource()== btoIncluir){
			CadMotoristaVO motoristaVO = new CadMotoristaVO();
			
//			CadMotoristaDAO motoristaDAO = new CadMotoristaDAO();
//			motoristaDAO.addMotiristaDAO(motoristaVO);
			txtCodigo.setText(String.valueOf(motoristaVO.getMotoristaPK()));
			txtCodigo.requestFocus();
			
			btoIncluir.setEnabled(false); btoLocalizar.setEnabled(false); btoAtualizar.setVisible(false);btoAtualizar.setEnabled(false);
			btoGravar.setEnabled(true); btoCancelar.setVisible(true); btoSair.setVisible(false);btoSair.setEnabled(false);
			txtCodigo.setFocusable(true);
		
			limpaCampos();

		}

		if (m.getSource()== btoGravar){
			try{
				/*PEGA AS INFORMACOES DO ENDERECO E CHAMA A CLASSE PARA GRAVAR NO BANCO DE DADOS*/
				CadEnderecoVO enderecoVO = new CadEnderecoVO();
				if(enderecoPk==0){
					enderecoVO.setCep(JtxtCep.getText());
					enderecoVO.setEndereco(txtEndereco.getText());
					enderecoVO.setBairro(txtBairro.getText());
					enderecoVO.setCidade(txtCidade.getText());
					enderecoVO.setEstado(String.valueOf(jcbTipoEstado.getSelectedItem()));

					CadEnderecoDAO enderecoDAO = new CadEnderecoDAO();
					try {
						enderecoDAO.saveEnderecoDAO(enderecoVO);
					} catch (InstantiationException | IllegalAccessException e) {
						e.printStackTrace();
					}finally{
						try {
							ConnectionFactory.getClosedConnection();
						} catch (IllegalAccessException | InstantiationException e) {
							e.printStackTrace();
						}
					}
				}else{
					enderecoVO.setEnderecoPk(enderecoPk);
				}
				/* PEGA AS INFORMACOES DO TELEFONE E CHAMA A CLASSE PARA GRAVAR NO BANCO DE DADOS */
				CadTelefoneVO telefoneVO = new CadTelefoneVO();
				telefoneVO.setTelefoneA(JtxtTelefone.getText());
				telefoneVO.setCelularA(JtxtCelular.getText());
				
				CadTelefoneDAO telefoneDAO = new CadTelefoneDAO();
				try {
					telefoneDAO.saveTelefoneDAO(telefoneVO);
				} catch (InstantiationException | IllegalAccessException e) {
					e.printStackTrace();
				}finally{
					try {
						ConnectionFactory.getClosedConnection();
					} catch (IllegalAccessException | InstantiationException e) {
						e.printStackTrace();
					}
				}
				/* PEGA AS INFORMACOES DOS MOTORISTA E CHAMA A CLASSE PARA GRAVAR NO BANCO DE DADOS*/
				CadMotoristaVO motoristaVO = new CadMotoristaVO();
				motoristaVO.setMotoristaPK(txtCodigo.getText());
				motoristaVO.setEnderecoFk(enderecoVO.getEnderecoPk());
				motoristaVO.setTelefoneFk(telefoneVO.getTelefonePk());
				motoristaVO.setNome(txtNome.getText());
				motoristaVO.setNumero(txtNumero.getText());
				motoristaVO.setRg(JtxtRg.getText());
				motoristaVO.setCpf(JtxtCpf.getText());
				motoristaVO.setHabilitacao(JtxtHabilitacao.getText());
				motoristaVO.setCategoria(String.valueOf(jcbCategoria.getSelectedItem()));
				motoristaVO.setDataVencimentos(timestampV);
				motoristaVO.setDataNascimentos(timestampN);
				motoristaVO.setBanco(String.valueOf(jcbTipoBanco.getSelectedItem()));
				motoristaVO.setAgencia(txtAgencia.getText());
				motoristaVO.setConta(txtConta.getText());
				motoristaVO.setTipo(String.valueOf(jcbTipoConta.getSelectedItem()));
				motoristaVO.setComissao(txtComissao.getText());
				motoristaVO.setDataCadastros(timestamp);
				
				CadMotoristaDAO motoristaDAO = new CadMotoristaDAO();
				try {
					motoristaDAO.saveMotoristaDAO(motoristaVO);
				} catch (InstantiationException | IllegalAccessException e) {
					e.printStackTrace();
				}finally{
					try {
						ConnectionFactory.getClosedConnection();
					} catch (IllegalAccessException | InstantiationException e) {
						e.printStackTrace();
					}
				}
				
				btoIncluir.setEnabled(true); btoGravar.setEnabled(false); btoLocalizar.setEnabled(true);
				btoCancelar.setEnabled(false); btoCancelar.setVisible(true); btoSair.setEnabled(true); btoSair.setVisible(true);
				
				limpaCampos();
			}catch(SQLException e){
				JOptionPane.showMessageDialog(this, "Erro ao gravar motorista.","ControlMoto",JOptionPane.INFORMATION_MESSAGE);
			}
       }
		
		if (m.getSource() == btoLocalizar){
			try{			
				CadMotoristaVO motoristaVO = new CadMotoristaVO();
				String placa = JOptionPane.showInputDialog(this,"Digite o código do motorista!","Moto Expores",JOptionPane.INFORMATION_MESSAGE);
				motoristaVO.setMotoristaPK(placa.toUpperCase());
				/*
				 * PEGA AS INFORMACOES DOS MOTORISTA E CHAMA A CLASSE PARA GRAVAR NO BANCO DE DADOS 
				 */
				CadMotoristaDAO motoristaDAO = new CadMotoristaDAO();
				try {
					motoristaDAO.readMotoristaByPk(motoristaVO);
				} catch (InstantiationException | IllegalAccessException e) {
					e.printStackTrace();
				}finally{
					try {
						ConnectionFactory.getClosedConnection();
					} catch (IllegalAccessException | InstantiationException e) {
						e.printStackTrace();
					}
				}
				txtCodigo.setText(String.valueOf(motoristaVO.getMotoristaPK()));
				enderecoPk = motoristaVO.getEnderecoFk();
				telefonePk = motoristaVO.getTelefoneFk();
				txtNome.setText(motoristaVO.getNome());
				txtNumero.setText(motoristaVO.getNumero());
				JtxtRg.setText(motoristaVO.getRg());
				JtxtCpf.setText(motoristaVO.getCpf());
				JtxtHabilitacao.setText(motoristaVO.getHabilitacao());
				jcbCategoria.setSelectedItem(motoristaVO.getCategoria());
				JtxtVencimento.setText(String.valueOf(sdf.format(motoristaVO.getDataVencimentos())));
				JtxtDataNascimento.setText(String.valueOf(sdf.format(motoristaVO.getDataNascimentos())));
				jcbTipoBanco.setSelectedItem(motoristaVO.getBanco());
				txtAgencia.setText(motoristaVO.getAgencia());
				txtConta.setText(motoristaVO.getConta());
				jcbTipoConta.setSelectedItem(motoristaVO.getTipo());
				txtComissao.setText(String.valueOf(comissao.format(comissa = Double.parseDouble(motoristaVO.getComissao()))));
				txtDataCadastro.setText(String.valueOf(sdf.format(motoristaVO.getDataCadastros())));
				
				/* PEGA AS INFORMACOES DOS ENDERECO E CHAMA A CLASSE PARA GRAVAR NO BANCO DE DADOS */
				CadEnderecoVO enderecoVO = new CadEnderecoVO();
				enderecoVO.setEnderecoPk(motoristaVO.getEnderecoFk());
				CadEnderecoDAO enderecoDAO = new CadEnderecoDAO();
				try {
					enderecoDAO.readEnderecoByPk(enderecoVO);
				} catch (InstantiationException | IllegalAccessException e) {
					e.printStackTrace();
				}finally{
					try {
						ConnectionFactory.getClosedConnection();
					} catch (IllegalAccessException | InstantiationException e) {
						e.printStackTrace();
					}
				}
				JtxtCep.setText(enderecoVO.getCep());
				txtEndereco.setText(enderecoVO.getEndereco());
				txtBairro.setText(enderecoVO.getBairro());
				txtCidade.setText(enderecoVO.getCidade());
				jcbTipoEstado.setSelectedItem(enderecoVO.getEstado());
				
				/* PEGA AS INFORMACOES DOS TELEFONE E CHAMA A CLASSE PARA GRAVAR NO BANCO DE DADOS */
				CadTelefoneVO telefoneVO = new CadTelefoneVO();
				telefoneVO.setTelefonePk(motoristaVO.getTelefoneFk());
				CadTelefoneDAO telefoneDAO = new CadTelefoneDAO();
				try {
					telefoneDAO.readTelefoneByPk(telefoneVO);
				} catch (InstantiationException | IllegalAccessException e) {
					e.printStackTrace();
				}finally{
					try {
						ConnectionFactory.getClosedConnection();
					} catch (IllegalAccessException | InstantiationException e) {
						e.printStackTrace();
					}
				}
				JtxtTelefone.setText(telefoneVO.getTelefoneA());
				JtxtCelular.setText(telefoneVO.getCelularA());
				
				ValidadeHabilitacao valHab = new ValidadeHabilitacao();
				boolean valida = valHab.verificarValidadeHabilitacao(JtxtVencimento.getText());
				if(valida==false){
					JOptionPane.showMessageDialog(this,"Habilitação está vencida ou vence hoje","ControlMoto", JOptionPane.INFORMATION_MESSAGE);
					//JtxtVencimento.requestFocus();
				}
							
				btoAtualizar.setVisible(true); btoAtualizar.setEnabled(true); btoLocalizar.setVisible(false); btoLocalizar.setEnabled(false);
				btoIncluir.setEnabled(false); btoExcluir.setEnabled(true); btoExcluir.setVisible(true); btoCancelar.setVisible(true);
				btoCancelar.setEnabled(true); btoSair.setVisible(false); btoSair.setEnabled(true);
			} catch(SQLException ex) {
				JOptionPane.showMessageDialog(this,"Motorista não localizada.\nPara cadastrar clique em incluir.","ControlMoto",JOptionPane.INFORMATION_MESSAGE);
			}
			
        }

		if (m.getSource() == btoAtualizar){
			try{
			/*PEGA AS INFORMACOES DOS MOTORISTA E CHAMA A CLASSE PARA GRAVAR NO BANCO DE DADOS*/
			CadMotoristaVO motoristaVO = new CadMotoristaVO();
			motoristaVO.setMotoristaPK(txtCodigo.getText());
			motoristaVO.setEnderecoFk(enderecoPk);
			motoristaVO.setTelefoneFk(telefonePk);
			motoristaVO.setNome(txtNome.getText());
			motoristaVO.setNumero(txtNumero.getText());
			motoristaVO.setRg(JtxtRg.getText());
			motoristaVO.setCpf(JtxtCpf.getText());
			motoristaVO.setHabilitacao(JtxtHabilitacao.getText());
			motoristaVO.setCategoria(String.valueOf(jcbCategoria.getSelectedItem()));
			motoristaVO.setBanco(String.valueOf(jcbTipoBanco.getSelectedItem()));
			motoristaVO.setTipo(String.valueOf(jcbTipoConta.getSelectedItem()));
			motoristaVO.setAgencia(txtAgencia.getText());
			motoristaVO.setConta(txtConta.getText());
			motoristaVO.setComissao(txtComissao.getText());
			try{
				motoristaVO.setDataVencimentos(new java.sql.Timestamp(sdf.parse(JtxtVencimento.getText()).getTime()));
				motoristaVO.setDataNascimentos(new java.sql.Timestamp(sdf.parse(JtxtDataNascimento.getText()).getTime()));
				motoristaVO.setDataCadastros(new java.sql.Timestamp(sdf.parse(txtDataCadastro.getText()).getTime()));
			}catch(Exception ex){}
			CadMotoristaDAO motoristaDAO = new CadMotoristaDAO();
			try {
				motoristaDAO.alterMotoristaByPk(motoristaVO);
			} catch (InstantiationException | IllegalAccessException e) {
				e.printStackTrace();
			}finally{
				try {
					ConnectionFactory.getClosedConnection();
				} catch (IllegalAccessException | InstantiationException e) {
					e.printStackTrace();
				}
			}
			/*PEGA AS INFORMACOES DOS ENDERECO E CHAMA A CLASSE PARA GRAVAR NO BANCO DE DADOS*/
			CadEnderecoVO enderecoVO = new CadEnderecoVO();
			enderecoVO.setEnderecoPk(motoristaVO.getEnderecoFk());
			enderecoVO.setCep(JtxtCep.getText());
			enderecoVO.setEndereco(txtEndereco.getText());
			enderecoVO.setBairro(txtBairro.getText());
			enderecoVO.setCidade(txtCidade.getText());
			enderecoVO.setEstado(String.valueOf(jcbTipoEstado.getSelectedItem()));
			
			CadEnderecoDAO enderecoDAO = new CadEnderecoDAO();
			try {
				enderecoDAO.alterEnderecoByPk(enderecoVO);
			} catch (InstantiationException | IllegalAccessException e) {
				e.printStackTrace();
			}finally{
				try {
					ConnectionFactory.getClosedConnection();
				} catch (IllegalAccessException | InstantiationException e) {
					e.printStackTrace();
				}
			}
			/*PEGA AS INFORMACOES DOS TELEFONE E CHAMA A CLASSE PARA GRAVAR NO BANCO DE DADOS*/
			CadTelefoneVO telefoneVO = new CadTelefoneVO();
			telefoneVO.setTelefonePk(motoristaVO.getTelefoneFk());
			telefoneVO.setTelefoneA(JtxtTelefone.getText());
			telefoneVO.setCelularA(JtxtCelular.getText());
			
			CadTelefoneDAO telefoneDAO = new CadTelefoneDAO();
			try {
				telefoneDAO.alterTelefoneByPk(telefoneVO);
			} catch (InstantiationException | IllegalAccessException e) {
				e.printStackTrace();
			}finally{
				try {
					ConnectionFactory.getClosedConnection();
				} catch (IllegalAccessException | InstantiationException e) {
					e.printStackTrace();
				}
			}			
			
			btoAtualizar.setVisible(false); btoAtualizar.setEnabled(false); btoLocalizar.setVisible(true); btoLocalizar.setEnabled(true);
			btoIncluir.setVisible(true); btoIncluir.setEnabled(true); btoExcluir.setEnabled(false); //btoExcluir.setVisible(false);
			btoSair.setVisible(true); btoSair.setEnabled(true); btoCancelar.setVisible(false); btoCancelar.setEnabled(false);
			
			limpaCampos();
			}catch(SQLException e){
				JOptionPane.showMessageDialog(this,"Erro na atualização.","ControlMoto",JOptionPane.INFORMATION_MESSAGE);
			}
			
		}

		if (m.getSource()== btoExcluir){
			try{
				CadMotoristaVO motoristaVO = new CadMotoristaVO();
				motoristaVO.setMotoristaPK(txtCodigo.getText());
				
				CadMotoristaDAO motoristaDAO = new CadMotoristaDAO();
				try {
					motoristaDAO.deleteMotoristaByPk(motoristaVO);
				} catch (InstantiationException | IllegalAccessException e) {
					e.printStackTrace();
				}finally{
					try {
						ConnectionFactory.getClosedConnection();
					} catch (IllegalAccessException | InstantiationException e) {
						e.printStackTrace();
					}
				}				
				btoIncluir.setEnabled(true); btoIncluir.setVisible(true); btoLocalizar.setEnabled(true); btoLocalizar.setVisible(true);
				btoAtualizar.setEnabled(false); btoAtualizar.setVisible(false); btoGravar.setEnabled(false);
				btoExcluir.setEnabled(false); btoExcluir.setVisible(true); btoSair.setEnabled(true); btoSair.setVisible(true);
				btoCancelar.setEnabled(false); btoCancelar.setVisible(false);
	
				limpaCampos();
			}catch(SQLException e){
				JOptionPane.showMessageDialog(this, "Erro ao excluir motorista.","ControlMoto",JOptionPane.INFORMATION_MESSAGE);
			}			
		}

		

		if (m.getSource()== btoCancelar){
			JOptionPane.showMessageDialog(this,"Procedimento cancelado!","Moto Expores",JOptionPane.INFORMATION_MESSAGE);
			//int resultado = JOptionPane.showConfirmDialog(null,"Procedimento cancelado!","ControlMoto",JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.WARNING_MESSAGE );
			//if (resultado == 0)
			btoIncluir.setEnabled(true); btoLocalizar.setVisible(true); btoLocalizar.setEnabled(true); btoAtualizar.setVisible(false);
			btoGravar.setEnabled(false); btoExcluir.setEnabled(false); btoCancelar.setVisible(false); btoSair.setVisible(true);
			btoSair.setEnabled(true);
			limpaCampos();
            }

		if (m.getSource()== btoSair){
			int resultado = JOptionPane.showConfirmDialog(this,"Deseja sair do Cadastro de Motorista?","ControlMoto",JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.WARNING_MESSAGE );
			if (resultado == 0)
				CadMotorista.this.dispose();
			else
				return;
			}
		}
	
	private MaskFormatter setMascara(String mascara){
		MaskFormatter mask = null;
		try{
			mask = new MaskFormatter(mascara);
		}catch(java.text.ParseException e){}
		return mask;
	}
	
	class MeuDocument extends PlainDocument{
		public void insertString(int offs, String str, AttributeSet a)throws BadLocationException{
			super.insertString(offs, str.toUpperCase(),a);
		}
	}
	
	public void limpaCampos(){
		txtCodigo.setText("");
		txtNome.setText("");
		JtxtRg.setText("");
		JtxtCpf.setText("");
		JtxtHabilitacao.setText("");
		jcbCategoria.setSelectedItem("");
		JtxtVencimento.setText("");
		JtxtDataNascimento.setText("");
		txtEndereco.setText("");
		txtNumero.setText("");
		txtBairro.setText("");
		txtCidade.setText("");
		jcbTipoEstado.setSelectedItem("");
		JtxtCep.setText("");
		JtxtTelefone.setText("");
		JtxtCelular.setText("");
		jcbTipoBanco.setSelectedItem("");
		txtAgencia.setText("");
		txtConta.setText("");
		jcbTipoConta.setSelectedItem("");
		txtComissao.setText("");
		txtDataCadastro.setText("");
	}
	
	public void atualizaCampos(){
		try{
			txtCodigo.setText(rs.getString("Codigo"));
			txtNome.setText(rs.getString("NomeMotorista"));
			JtxtRg.setText(rs.getString("Rg"));
			JtxtCpf.setText(rs.getString("Cpf"));
			JtxtHabilitacao.setText(rs.getString("Habilitacao"));
			jcbCategoria.setSelectedItem(rs.getString("Cartegoria"));
			JtxtVencimento.setText(rs.getString("Vencimento"));
			JtxtDataNascimento.setText(rs.getString("DataNascimento"));
			txtEndereco.setText(rs.getString("Endereco"));
			txtNumero.setText(rs.getString("Numero"));
			txtCidade.setText(rs.getString("Cidade"));
			jcbTipoEstado.setSelectedItem(rs.getString("Estado"));
			JtxtCep.setText(rs.getString("Cep"));
			JtxtTelefone.setText(rs.getString("Telefone"));
			JtxtCelular.setText(rs.getString("Celeluar"));
			jcbTipoBanco.setSelectedItem(rs.getString("Banco"));
			txtAgencia.setText(rs.getString("Agencia"));
			txtConta.setText(rs.getString("Conta"));
			jcbTipoConta.setSelectedItem(rs.getString("Tipo"));
			txtComissao.setText(rs.getString("Comissao"));
			txtDataCadastro.setText(rs.getString("DataCadastro"));
		}
		catch(SQLException ex)
		{}
	}

	public boolean validaCodigo( boolean isValid){
		if(!txtCodigo.getText().isEmpty()){
			try{
				txtCodigo.selectAll();
				Pattern pattern = Pattern.compile("[A-Z]{3,3}[ ][0-9]{4,4}");
				Matcher matcher = pattern.matcher(txtCodigo.getText());
				isValid = matcher.matches();
				return isValid;
			}catch(PatternSyntaxException pse){
				pse.printStackTrace();
			}
		}return isValid;
	}
	
	public void CadMotoristaF(String titulo, CadMotorista cadMotorista){
		ControlMoto controlmoto = new ControlMoto();
		new CadMotorista(titulo, controlmoto);
	}
}