package br.com.cs.controlmoto.controller;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.File;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Timestamp;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFormattedTextField;
import javax.swing.JInternalFrame;
import javax.swing.JLabel;
import javax.swing.JLayeredPane;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JSeparator;
import javax.swing.JTextField;
import javax.swing.JToolBar;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.MaskFormatter;
import javax.swing.text.PlainDocument;

import br.com.cs.controlmoto.domain.CadClienteDAO;
import br.com.cs.controlmoto.domain.CadEnderecoDAO;
import br.com.cs.controlmoto.domain.CadTabelaPrecoDAO;
import br.com.cs.controlmoto.domain.CadTelefoneDAO;
import br.com.cs.controlmoto.domain.ConnectionFactory;
import br.com.cs.controlmoto.utils.FixedLengthDocument;
import br.com.cs.controlmoto.vo.CadClienteVO;
import br.com.cs.controlmoto.vo.CadEnderecoVO;
import br.com.cs.controlmoto.vo.CadTabelaPrecoVO;
import br.com.cs.controlmoto.vo.CadTelefoneVO;

/**
 * Company Fictec Cons. Inf.
 * @since 06/09/2012
 * @version 1.0.6
 * @author Clovis
 */

class CadCliente extends JInternalFrame implements ActionListener, FocusListener, KeyListener {
	/**
	 * 
	 */
	private static final long serialVersionUID = -6964238294734865667L;
	
	private JToolBar jtbBarraFerramenta;
	
	private JPanel jpCampos, jpToolBar;

	private JLabel	lblCodigo, lblNome, lblCnpj, lblInscricaoestadual, lblEndereco, lblNumero, lblBairro, lblCidade, lblEstado, lblCep, lblContato,
	lblTelefone, lblFax, lblCelular, lblSite, lblEmail, lblTabPreco, lblDescTabPreco, lblTaxa, lblDatacadastro, lblInfoGerias, lblInfoEndereco,
	lblInfoContato;

	private JTextField	txtCodigo, txtNome, txtEndereco, txtNumero, txtBairro, txtCidade, txtEstado, txtContato, txtSite, txtEmail,
	txtTabPreco, txtTaxa, txtDataCadastro;

	private JFormattedTextField	JtxtCnpj, JtxtInscricaoestadual, JtxtCep, JtxtTelefoneA, JtxtFaxA, JtxtCelularA, JtxtDatacadastro;
	
	private JComboBox jcbEstado;
	
	private JButton	btoIncluir, btoLocalizar, btoGravar, btoExcluir, btoSair, btoAtualizar, btoCancelar;
	
	private JLayeredPane jlpInfoGerais, jlpInfoEndereco, jlpInfoContato;
	
	private JSeparator jsInfoGerais, jsInfoEmdereco, jsInfoContato;
	
	private GridBagConstraints cons;
	
	private ControlMoto telaControlMoto;
	String [] estados ={"","AC","AL","AP","AM","BA","CE","DF","ES","GO","MA","MT","MS","MG","PA","PB","PR", "PE","PI","RJ","RN","RS","RO","RR","SC","SP","SE","TO"};
	String	val = "", tx = "", caminho = "", separadorPath = "";
	double	valor = 0, taxa = 0;
	Connection	minhaConexao;
	Statement	minhaSTM;
	ResultSet	rs;
	NumberFormat valorH, taxaC;
	int enderecoPk, telefonePk;
	
	Date data;
    SimpleDateFormat sdf,sdfTimestamp;
    Timestamp timestamp;
    java.sql.Date dt;
    //Serve para mover a tela interna
    static int openFrameCount = 2;
    static final int xOffset = 10, yOffset = 10;

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	//@SuppressWarnings("unchecked")
	public CadCliente(String titulo, ControlMoto controlMoto){
		super(titulo,false,true,false,true);
		setSize(650, 540);
		setVisible(true);
    	setLocation(xOffset*openFrameCount, yOffset*openFrameCount);
		separadorPath = System.getProperty("file.separator");
		caminho = new File("").getAbsolutePath();
		setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
	
		this.telaControlMoto = telaControlMoto;
		controlMoto.jDesktopPane.add(this);
		
		jpCampos = new JPanel(); jpToolBar = new JPanel();

		GridBagConstraints cons = new GridBagConstraints();
		//Container jpCampos = getContentPane();
		GridBagLayout layout = new GridBagLayout();
		jpCampos.setLayout(layout);

		cons.insets = new Insets (3,5,3,5); 
		cons.weightx = 0.30;cons.weighty = 0.30;

		valorH = NumberFormat.getCurrencyInstance().getNumberInstance(new Locale("",""));
		valorH.setMaximumFractionDigits(2);valorH.setMinimumFractionDigits(2);
		taxaC = NumberFormat.getCurrencyInstance().getNumberInstance(new Locale("",""));
		taxaC.setMaximumFractionDigits(2);taxaC.setMinimumFractionDigits(2);
		
		jtbBarraFerramenta = new JToolBar();
		jtbBarraFerramenta.setFloatable(false);
		jtbBarraFerramenta.setOrientation(javax.swing.SwingConstants.VERTICAL);

		lblCodigo = new JLabel("Código");lblNome = new JLabel("Nome");lblCnpj = new JLabel("C.N.P.J");
		lblInscricaoestadual = new JLabel("Ins. Estadual");lblEndereco = new JLabel("Endereço");
		lblNumero = new JLabel("Número");lblBairro = new JLabel("Bairro");lblCidade = new JLabel("Cidade");
		lblEstado = new JLabel("Estado");lblCep = new JLabel("CEP");lblContato = new JLabel("Contato");
		lblTelefone = new JLabel ("Telefone");lblFax = new JLabel("Fax");lblCelular = new JLabel("Celular");
		lblSite = new JLabel("Site");lblEmail = new JLabel("E-mail");lblTabPreco = new JLabel("Tab. Preço");
		lblTaxa = new JLabel("Taxas");lblDatacadastro = new JLabel("Data do Cadastro");
		lblInfoGerias = new JLabel("Informações Gerais");lblInfoEndereco = new JLabel("Informações de Localização");
		lblInfoContato = new JLabel("Informações de Contato"); lblDescTabPreco = new JLabel();

		txtCodigo = new JTextField();txtCodigo.requestFocus();txtCodigo.setDocument(new MeuDocument());
		txtNome = new JTextField();txtNome.setDocument(new MeuDocument());txtNome.setDocument(new FixedLengthDocument(50));
		txtEndereco = new JTextField();txtEndereco.setDocument(new MeuDocument());txtEndereco.setDocument(new FixedLengthDocument(60));
		txtNumero = new JTextField();txtNumero.setDocument(new MeuDocument());txtNumero.setDocument(new FixedLengthDocument(6));
		txtBairro = new JTextField();txtBairro.setDocument(new MeuDocument());txtBairro.setDocument(new FixedLengthDocument(30));
		txtCidade = new JTextField();txtCidade.setDocument(new MeuDocument());txtCidade.setDocument(new FixedLengthDocument(20));
		txtEstado = new JTextField();txtEstado.setDocument(new MeuDocument());txtEstado.setDocument(new FixedLengthDocument(2));
		txtContato = new JTextField();txtContato.setDocument(new MeuDocument());txtContato.setDocument(new FixedLengthDocument(20));
		txtSite = new JTextField();txtSite.setDocument(new FixedLengthDocument(30));txtEmail = new JTextField();txtEmail.setDocument(new FixedLengthDocument(30));
		txtTabPreco = new JTextField();txtTabPreco.setDocument(new FixedLengthDocument(7));txtTaxa = new JTextField();txtTaxa.setDocument(new FixedLengthDocument(7));
		txtDataCadastro = new JTextField();txtDataCadastro.setDocument(new FixedLengthDocument(10));

		JtxtCnpj = new JFormattedTextField(setMascara("##.###.###/####-##"));JtxtCnpj.setDocument(new FixedLengthDocument(18));
		JtxtInscricaoestadual = new JFormattedTextField(setMascara("###.###.###.###"));JtxtInscricaoestadual.setDocument(new FixedLengthDocument(15));
		JtxtCep = new JFormattedTextField(setMascara("#####-###"));JtxtCep.setDocument(new FixedLengthDocument(9));
		JtxtTelefoneA = new JFormattedTextField(setMascara("(##) ####-####"));JtxtTelefoneA.setDocument(new FixedLengthDocument(14));
		JtxtFaxA = new JFormattedTextField(setMascara("(##) ####-####"));JtxtFaxA.setDocument(new FixedLengthDocument(14));
		JtxtCelularA = new JFormattedTextField(setMascara("(##) ####-####"));JtxtCelularA.setDocument(new FixedLengthDocument(14));
		JtxtDatacadastro = new JFormattedTextField(setMascara("##/##/####"));JtxtDatacadastro.setDocument(new FixedLengthDocument(10));

		jcbEstado = new JComboBox(estados);

		btoIncluir = new JButton(); btoIncluir.setMnemonic(KeyEvent.VK_I); btoIncluir.setToolTipText("Incluir");
		btoIncluir.setIcon(new ImageIcon(caminho + separadorPath + "imagens" + separadorPath + "icone" + separadorPath + "hd_folha_novo_32x32.png"));
		
		btoLocalizar = new JButton(); btoLocalizar.setMnemonic(KeyEvent.VK_L); btoLocalizar.setToolTipText("Localizar");
		btoLocalizar.setIcon(new ImageIcon(caminho + separadorPath + "imagens" + separadorPath + "icone" + separadorPath + "hd_lupa_32x32.png"));
		
		btoGravar = new JButton(); btoGravar.setMnemonic(KeyEvent.VK_G); btoGravar.setToolTipText("Gravar");
		btoGravar.setIcon(new ImageIcon(caminho + separadorPath + "imagens"	+ separadorPath + "icone" + separadorPath + "hd_flopy_32x32.png"));
		
		btoExcluir =  new JButton(); btoExcluir.setMnemonic(KeyEvent.VK_E); btoExcluir.setToolTipText("Excluir");
		btoExcluir.setIcon(new ImageIcon(caminho + separadorPath + "imagens" + separadorPath + "icone" + separadorPath + "lixeira_32x32.png"));
		
		btoSair = new JButton(); btoSair.setMnemonic(KeyEvent.VK_S); btoSair.setToolTipText("Sair"); 
		btoSair.setIcon(new ImageIcon(caminho + separadorPath + "imagens" + separadorPath + "icone" + separadorPath	+ "cancelar_circular_32x32.png"));
		
		btoAtualizar = new JButton(); btoAtualizar.setMnemonic(KeyEvent.VK_A); btoAtualizar.setToolTipText("Atualizar");
		btoAtualizar.setIcon(new ImageIcon(caminho + separadorPath + "imagens" + separadorPath + "icone" + separadorPath	+ "hd_atualiza_32x32.png"));
		
		btoCancelar = new JButton(); btoCancelar.setMnemonic(KeyEvent.VK_C); btoCancelar.setToolTipText("Cancelar");
		btoCancelar.setIcon(new ImageIcon(caminho + separadorPath + "imagens" + separadorPath + "icone" + separadorPath + "hd_cancela_32x32.png"));
		
		jsInfoGerais = new JSeparator();jsInfoGerais.setSize(550, 1);
		jsInfoEmdereco = new JSeparator();jsInfoEmdereco.setSize(550, 1);
		jsInfoContato = new JSeparator();jsInfoContato.setSize(550, 1);
		
		sdf = new SimpleDateFormat ("dd/MM/yyyy");
		sdfTimestamp = new SimpleDateFormat ("yyyy/MM/dd");
		sdf.setLenient (false);sdfTimestamp.setLenient (false);
		
		cons.anchor = GridBagConstraints.NORTHWEST;
		/*
		 * Insere JLabel de Informaï¿½ï¿½es gerais
		 * Insere JSeparador de Informaï¿½ï¿½es gerais
		 */
		cons.gridx = 1;cons.gridy = 1;cons.gridwidth = 3;cons.ipadx = 70;
		lblInfoGerias.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		lblInfoGerias.setForeground(Color.BLUE);
		jpCampos.add(lblInfoGerias, cons);
		cons.gridx = 1;cons.gridy = 2;cons.gridwidth = 10;cons.ipadx = 550;
		jpCampos.add(jsInfoGerais, cons);
		
		cons.gridx = 1;cons.gridy = 3;cons.gridwidth = 1;cons.ipadx = 50;
		jpCampos.add(lblCodigo,cons);
		cons.gridx = 2;cons.gridy = 3;cons.gridwidth = 2;cons.ipadx = 80;cons.ipady = 1;
		jpCampos.add(txtCodigo,cons);txtCodigo.setNextFocusableComponent(txtNome);
		txtCodigo.addActionListener(this);txtCodigo.addFocusListener(this);

		cons.gridx = 1;cons.gridy = 4;cons.gridwidth = 1;cons.ipadx = 50;
		jpCampos.add(lblNome,cons);
		cons.gridx = 2;cons.gridy = 4;cons.gridwidth = 9;cons.ipadx = 450;
		jpCampos.add(txtNome,cons);txtNome.setNextFocusableComponent(JtxtCnpj);
		txtNome.addActionListener(this);txtNome.addFocusListener(this);txtNome.addKeyListener(this);

		cons.gridx = 1;	cons.gridy = 5;cons.gridwidth = 1;cons.ipadx = 50;
		jpCampos.add(lblCnpj,cons);
		cons.gridx = 2;cons.gridy = 5;cons.gridwidth = 2;cons.ipadx = 180;
		JtxtCnpj.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		jpCampos.add(JtxtCnpj,cons);JtxtCnpj.setNextFocusableComponent(JtxtInscricaoestadual);
		JtxtCnpj.addActionListener(this);JtxtCnpj.addFocusListener(this);

		cons.gridx = 6;cons.gridy = 5;cons.gridwidth = 1;cons.ipadx = 50;
		lblInscricaoestadual.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		jpCampos.add(lblInscricaoestadual,cons);
		cons.gridx = 7;cons.gridy = 5;cons.gridwidth = 3;cons.ipadx = 140;
		JtxtInscricaoestadual.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		jpCampos.add(JtxtInscricaoestadual,cons);JtxtInscricaoestadual.setNextFocusableComponent(txtSite);
		JtxtInscricaoestadual.addActionListener(this);JtxtInscricaoestadual.addFocusListener(this);
		
		cons.gridx = 1;cons.gridy = 6;cons.gridwidth = 1;cons.ipadx = 50;
		jpCampos.add(lblSite,cons);
		cons.gridx = 2;cons.gridy = 6;cons.gridwidth = 9;cons.ipadx = 450;
		jpCampos.add(txtSite,cons);txtSite.setNextFocusableComponent(txtTabPreco);
		txtSite.addActionListener(this);txtSite.addFocusListener(this);
		
		cons.gridx = 1;cons.gridy = 7;cons.gridwidth = 1;cons.ipadx = 50;
		jpCampos.add(lblTabPreco,cons);
		cons.gridx = 2;cons.gridy = 7;cons.gridwidth = 1;cons.ipadx = 110;
		txtTabPreco.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		jpCampos.add(txtTabPreco,cons);txtTabPreco.setNextFocusableComponent(txtTaxa);
		txtTabPreco.addActionListener(this);txtTabPreco.addFocusListener(this);
		txtTabPreco.addKeyListener(this);txtTabPreco.addFocusListener(this);
		
		cons.gridx = 3;cons.gridy = 7;cons.gridwidth = 1;cons.ipadx = 50;
		jpCampos.add(lblDescTabPreco,cons);

		cons.gridx = 6;cons.gridy = 7;cons.gridwidth = 1;cons.ipadx = 50;
		lblTaxa.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		jpCampos.add(lblTaxa,cons);
		cons.gridx = 7;cons.gridy = 7;cons.gridwidth = 1;cons.ipadx = 130;
		txtTaxa.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
		jpCampos.add(txtTaxa,cons);txtTaxa.setNextFocusableComponent(txtDataCadastro);
		txtTaxa.addActionListener(this);txtTaxa.addFocusListener(this);txtTaxa.addKeyListener(this);

		cons.gridx = 1;cons.gridy = 8;cons.gridwidth = 1;cons.ipadx = 50;
		jpCampos.add(lblDatacadastro,cons);
		cons.gridx = 2;cons.gridy = 8;cons.gridwidth = 3;cons.ipadx = 110;
		txtDataCadastro.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		jpCampos.add(txtDataCadastro,cons);txtDataCadastro.setNextFocusableComponent(JtxtCep);
		txtDataCadastro.addActionListener(this);txtDataCadastro.addFocusListener(this);
		/*
		 * Insere JLabel de Informações endereço
		 * Insere JSeparador de Informações endereço 
		 */
		cons.gridx = 1;cons.gridy = 9;cons.gridwidth = 3;cons.ipadx = 70;
		lblInfoEndereco.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		lblInfoEndereco.setForeground(Color.BLUE);
		jpCampos.add(lblInfoEndereco, cons);
		cons.gridx = 1;cons.gridy = 10;cons.gridwidth = 30;cons.ipadx = 550;
		jpCampos.add(jsInfoEmdereco, cons);
		
		cons.gridx = 1;cons.gridy = 11;cons.gridwidth = 1;cons.ipadx = 50;
		jpCampos.add(lblCep,cons);
		cons.gridx = 2;cons.gridy = 11;cons.gridwidth = 3;cons.ipadx = 100;
		JtxtCep.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		jpCampos.add(JtxtCep,cons);JtxtCep.setNextFocusableComponent(txtEndereco);
		JtxtCep.addActionListener(this);JtxtCep.addFocusListener(this);
		
		cons.gridx = 1;cons.gridy = 12;cons.gridwidth = 1;cons.ipadx = 50;
		jpCampos.add(lblEndereco,cons);
		cons.gridx = 2;cons.gridy = 12;cons.gridwidth = 9;cons.ipadx = 450;
		jpCampos.add(txtEndereco,cons);txtEndereco.setNextFocusableComponent(txtNumero);
		txtEndereco.addActionListener(this);txtEndereco.addFocusListener(this);txtEndereco.addKeyListener(this);

		cons.gridx = 1;cons.gridy = 13;cons.gridwidth = 1;cons.ipadx = 50;
		jpCampos.add(lblNumero,cons);
		cons.gridx = 2;cons.gridy = 13;cons.gridwidth = 1;cons.ipadx = 40;
		jpCampos.add(txtNumero,cons);txtNumero.setNextFocusableComponent(txtBairro);
		txtNumero.addActionListener(this);txtNumero.addFocusListener(this);txtNumero.addKeyListener(this);
		
		cons.gridx = 4;cons.gridy = 13;cons.gridwidth = 1;cons.ipadx = 50;
		jpCampos.add(lblBairro,cons);
		cons.gridx = 5;cons.gridy = 13;cons.gridwidth = 3;cons.ipadx = 300;
		jpCampos.add(txtBairro,cons);txtBairro.setNextFocusableComponent(txtCidade);
		txtBairro.addActionListener(this);txtBairro.addFocusListener(this);txtBairro.addKeyListener(this);

		cons.gridx = 1;cons.gridy = 14;cons.gridwidth = 1;cons.ipadx = 50;
		jpCampos.add(lblCidade,cons);
		cons.gridx = 2;cons.gridy = 14;cons.gridwidth = 3;cons.ipadx = 150;
		jpCampos.add(txtCidade,cons);txtCidade.setNextFocusableComponent(jcbEstado);
		txtCidade.addActionListener(this);txtCidade.addFocusListener(this);txtCidade.addKeyListener(this);

		cons.gridx = 6;cons.gridy = 14;cons.gridwidth = 1;cons.ipadx = 50;
		lblEstado.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		jpCampos.add(lblEstado,cons);
		cons.gridx = 7;cons.gridy = 14;cons.gridwidth = 1;cons.ipadx = 110;
		jpCampos.add(jcbEstado,cons);jcbEstado.setNextFocusableComponent(txtContato);
		jcbEstado.addActionListener(this);jcbEstado.addKeyListener(this);
		/*
		 * Insere JLabel de Informações contato
		 * Insere JSeparador de Informações contato
		 */
		cons.gridx = 1;cons.gridy = 15;cons.gridwidth = 3;cons.ipadx = 70;
		lblInfoContato.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		lblInfoContato.setForeground(Color.BLUE);
		jpCampos.add(lblInfoContato, cons);
		cons.gridx = 1;cons.gridy = 16;cons.gridwidth = 30;cons.ipadx = 550;
		jpCampos.add(jsInfoContato, cons);
		
		cons.gridx = 1;cons.gridy = 17;cons.gridwidth = 1;cons.ipadx = 50;
		jpCampos.add(lblContato,cons);
		cons.gridx = 2;cons.gridy = 17;cons.gridwidth = 3;cons.ipadx = 150;
		jpCampos.add(txtContato,cons);txtContato.setNextFocusableComponent(JtxtTelefoneA);
		txtContato.addActionListener(this);txtContato.addFocusListener(this);

		cons.gridx = 6;cons.gridy = 17;cons.gridwidth = 1;cons.ipadx = 50;
		lblTelefone.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		jpCampos.add(lblTelefone,cons);
		cons.gridx = 7;cons.gridy = 17;cons.gridwidth = 3;cons.ipadx = 130;
		JtxtTelefoneA.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		jpCampos.add(JtxtTelefoneA,cons);JtxtTelefoneA.setNextFocusableComponent(JtxtFaxA);
		JtxtTelefoneA.addActionListener(this);JtxtTelefoneA.addFocusListener(this);

		cons.gridx = 1;cons.gridy = 18;cons.gridwidth = 1;cons.ipadx = 50;
		jpCampos.add(lblFax,cons);
		cons.gridx = 2;cons.gridy = 18;cons.gridwidth = 3;cons.ipadx = 130;
		JtxtFaxA.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		jpCampos.add(JtxtFaxA,cons);JtxtFaxA.setNextFocusableComponent(JtxtCelularA);
		JtxtFaxA.addActionListener(this);JtxtFaxA.addFocusListener(this);

		cons.gridx = 6;cons.gridy = 18;cons.gridwidth = 1;cons.ipadx = 50;
		lblCelular.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		jpCampos.add(lblCelular,cons);
		cons.gridx = 7;cons.gridy = 18;cons.gridwidth = 3;cons.ipadx = 130;
		JtxtCelularA.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		jpCampos.add(JtxtCelularA,cons);JtxtCelularA.setNextFocusableComponent(txtEmail);
		JtxtCelularA.addActionListener(this);JtxtCelularA.addFocusListener(this);

		cons.gridx = 1;cons.gridy = 19;	cons.gridwidth = 1;cons.ipadx = 50;
		jpCampos.add(lblEmail,cons);
		cons.gridx = 2;cons.gridy = 19;cons.gridwidth = 9;cons.ipadx = 450;
		jpCampos.add(txtEmail,cons);txtEmail.setNextFocusableComponent(btoGravar);
		txtEmail.addActionListener(this);txtEmail.addFocusListener(this);

		cons.anchor = GridBagConstraints.EAST; cons.fill = GridBagConstraints.BOTH;
		cons.gridx = 20;cons.gridy = 3;cons.gridwidth = 1;cons.gridheight = 1;cons.ipadx = 60;
		//jpCampos.add(btoIncluir,cons);btoIncluir.setNextFocusableComponent(btoLocalizar);
		btoIncluir.addActionListener(this);
		jtbBarraFerramenta.add(btoIncluir, cons);
		
		cons.gridx = 20;cons.gridy = 4;cons.gridwidth = 1;cons.gridheight = 1;cons.ipadx = 60;
		///jpCampos.add(btoGravar,cons);btoGravar.setNextFocusableComponent(btoCancelar);
		btoGravar.addActionListener(this);
		jtbBarraFerramenta.add(btoGravar, cons);

		cons.gridx = 20;cons.gridy = 5;cons.gridwidth = 1;cons.gridheight = 1;cons.ipadx = 60;
		//jpCampos.add(btoLocalizar,cons);btoLocalizar.setNextFocusableComponent(btoSair);
		btoLocalizar.addActionListener(this);
		jtbBarraFerramenta.add(btoLocalizar, cons);

		cons.gridx = 20;cons.gridy = 6;cons.gridwidth = 1;cons.gridheight = 1;cons.ipadx = 60;
		//jpCampos.add(btoAtualizar,cons);btoAtualizar.setNextFocusableComponent(btoExcluir);
		btoAtualizar.addActionListener(this);
		jtbBarraFerramenta.add(btoAtualizar, cons);

		cons.gridx = 20;cons.gridy = 7;cons.gridwidth = 1;cons.gridheight = 1;cons.ipadx = 60;
		//jpCampos.add(btoExcluir,cons);btoExcluir.setNextFocusableComponent(btoCancelar);
		btoExcluir.addActionListener(this);
		jtbBarraFerramenta.add(btoExcluir, cons);

		cons.gridx = 20;cons.gridy = 8;cons.gridwidth = 1;cons.gridheight = 1;cons.ipadx = 60;
		//jpCampos.add(btoCancelar,cons);
		btoCancelar.addActionListener(this);
		jtbBarraFerramenta.add(btoCancelar, cons);
		
		cons.gridx = 20;cons.gridy = 9;cons.gridwidth = 1;cons.gridheight = 1;cons.ipadx = 60;
		//jpCampos.add(btoSair,cons);btoSair.setNextFocusableComponent(txtCodigo);
		btoSair.addActionListener(this);
		jtbBarraFerramenta.add(btoSair, cons);
		
		btoIncluir.setEnabled(true);btoLocalizar.setEnabled(true);btoGravar.setEnabled(false);btoAtualizar.setEnabled(false);
		btoExcluir.setEnabled(false);btoSair.setEnabled(true);btoCancelar.setEnabled(false);
		
		jpToolBar.add(jtbBarraFerramenta);
		
		getContentPane().add(jpCampos, BorderLayout.CENTER);
		getContentPane().add(jpToolBar, BorderLayout.EAST);

		
	}
	/*
	 * (non-Javadoc)
	 * @see java.awt.event.KeyListener#keyReleased(java.awt.event.KeyEvent)
	 * Todos os eventos referente ao acionamneto das teclas
	 */
	public void keyReleased(KeyEvent c) {
	}
	public void keyTyped(KeyEvent c) {
	}
	public void keyPressed(KeyEvent c) {
		if (c.getSource() == txtTabPreco || c.getSource() == txtTaxa) {
			// Permite a tecla Backspace
			if (c.getKeyCode() == 8) {
				return;
			}
			// PERMITE A DIGITAÇÃO DE NÚMEROS NO TECLADO NUMÉRICO
			if (c.getKeyCode() < 96 || c.getKeyCode() > 105) {
				c.setKeyCode(KeyEvent.VK_DECIMAL);
				return;
			}
		}
	}
	/*
	 * (non-Javadoc)
	 * @see java.awt.event.FocusListener#focusGained(java.awt.event.FocusEvent)
	 * Todos os eventos referente ao focus dos componentes
	 */
	public void focusGained(FocusEvent c) {
		if (c.getSource() == txtTabPreco) {txtTabPreco.setToolTipText("Use ponto para separar os centavos!");	}
		if (c.getSource() == txtCodigo) {txtCodigo.selectAll();	}
		if (c.getSource() == txtNome) {txtNome.selectAll();}
		if (c.getSource() == JtxtCnpj) {JtxtCnpj.selectAll();}
		if (c.getSource() == JtxtInscricaoestadual) {JtxtInscricaoestadual.selectAll();}
		if (c.getSource() == txtEndereco) {txtEndereco.selectAll();}
		if (c.getSource() == txtBairro) {txtBairro.selectAll();}
		if (c.getSource() == txtCidade) {txtCidade.selectAll();}
		if (c.getSource() == txtEstado) {txtEstado.selectAll();}
		if (c.getSource() == JtxtCep) {JtxtCep.selectAll();}
		if (c.getSource() == txtContato) {txtContato.selectAll();}
		if (c.getSource() == JtxtTelefoneA) {JtxtTelefoneA.selectAll();}
		if (c.getSource() == JtxtFaxA) {JtxtFaxA.selectAll();}
		if (c.getSource() == JtxtCelularA) {JtxtCelularA.selectAll();}
		if (c.getSource() == txtSite) {txtSite.selectAll();}
		if (c.getSource() == txtEmail) {txtEmail.selectAll();}
		if (c.getSource() == txtTabPreco) {txtTabPreco.selectAll();}
		if (c.getSource() == txtTaxa) {txtTaxa.selectAll();}
		if (c.getSource() == txtDataCadastro) {
			txtDataCadastro.selectAll();
			if (txtDataCadastro.getText().equals("")) {
				data = new Date();
				txtDataCadastro.setText(""+ sdf.format(data));
				timestamp = new Timestamp(data.getTime());
			}
		}
	}

	public void focusLost(FocusEvent c) {
		if (c.getSource() == txtNome) {
			String nome = txtNome.getText();
		}
		if (c.getSource() == txtTabPreco) {
			if(!txtNome.getText().isEmpty() && !JtxtCnpj.getText().replace(".", "").replace("/", "").replace("-", "").isEmpty() ){
				if(txtTabPreco.getText() != null){
					CadTabelaPrecoVO cadTabelaPrecoVO = new CadTabelaPrecoVO();
					cadTabelaPrecoVO.setCodigoTabela( txtTabPreco.getText() );	
					try {
						cadTabelaPrecoVO = new CadTabelaPrecoDAO().getTabPrecoByCliente(cadTabelaPrecoVO);
						cadTabelaPrecoVO.setCodigoTabela(null);
						if(cadTabelaPrecoVO == null ){
							lblDescTabPreco.setText( cadTabelaPrecoVO.getDescricaoTabPreco() );
						}else{
							JOptionPane.showMessageDialog(this, "Tabela não encontrada.", "ControlMoto", JOptionPane.INFORMATION_MESSAGE);
						}
						
					} catch (InstantiationError | IllegalAccessException | InstantiationException | SQLException e) {
						e.printStackTrace();
					}
				}
			}else{
				JOptionPane.showMessageDialog(this, "É preciso preencher o nome e cnpj do cliente.", "ControlMoto", JOptionPane.INFORMATION_MESSAGE);				
			}
		}
		if (c.getSource() == txtTaxa) {
			if(txtTaxa.getText() != null){
				try{
					tx = txtTaxa.getText().replace(",", ".");
					taxa = Double.parseDouble(tx);
					txtTaxa.setText("" + taxaC.format(taxa));
				}catch(NumberFormatException nfe){
					System.out.println("Erro de conversï¿½o "+nfe );
				}
			}
		}
		
		if(c.getSource() == JtxtDatacadastro){
			if(btoGravar.isEnabled()){
				//JtxtDatacadastro.setNextFocusableComponent(btoGravar);
			}
			if (btoIncluir.isEnabled()){
				//JtxtDatacadastro.setNextFocusableComponent(btoIncluir);
			}
			if(btoAtualizar.isEnabled()){
				//JtxtDatacadastro.setNextFocusableComponent(btoAtualizar);				
			}
		}
		
		if(c.getSource() == JtxtCep){
			try{
				if(!JtxtCep.getText().equals("     -   ")){
					CadEnderecoVO enderecoVO = new CadEnderecoVO();
					enderecoVO.setCep(JtxtCep.getText());
					CadEnderecoDAO enderecoDAO = new CadEnderecoDAO();
					try {
						enderecoDAO.readEnderecoByCep(enderecoVO);
					} catch (IllegalAccessException e) {
						e.printStackTrace();
					} catch (InstantiationException e) {
						e.printStackTrace();
					}
					txtEndereco.setText(enderecoVO.getEndereco());
					txtBairro.setText(enderecoVO.getBairro());
					txtCidade.setText(enderecoVO.getCidade());
					jcbEstado.setSelectedItem(enderecoVO.getEstado());
					if(enderecoVO.getEnderecoPk() == null){
						txtEndereco.requestFocus();
					}else{
						txtNumero.requestFocus();
					}
				}else{
					JOptionPane.showMessageDialog(this,"Campo cep está vázio.\nDigite o cep.","ControlMoto",JOptionPane.INFORMATION_MESSAGE);
					JtxtCep.requestFocus();
				}
			} catch (SQLException e) {
				JOptionPane.showMessageDialog(this,"CEP não localizada.\nDigite seu endereço.","ControlMoto",JOptionPane.INFORMATION_MESSAGE);
			}
		}
		
	}
	/*
	 * (non-Javadoc)
	 * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
	 * Todos os eventos referente as acoes dos componentes
	 */
	public void actionPerformed(ActionEvent c) {
		if (c.getSource() == btoIncluir) {
			try{
				CadClienteVO clienteVO = new CadClienteVO();
				
				CadClienteDAO clienteDAO = new CadClienteDAO();
				try{
					clienteDAO.addClienteDAO(clienteVO);
				} catch (InstantiationException | IllegalAccessException e) {
					e.printStackTrace();
				}finally{
					try {
						ConnectionFactory.getClosedConnection();
					} catch (IllegalAccessException | InstantiationException e) {
						e.printStackTrace();
					}
				}
				txtCodigo.setText(String.valueOf(clienteVO.getClientePk()));
				txtNome.requestFocus();
				
				btoIncluir.setEnabled(false);btoIncluir.setVisible(true);
				btoLocalizar.setEnabled(false);	btoLocalizar.setVisible(true);
				btoAtualizar.setEnabled(false);btoAtualizar.setVisible(false);
				btoGravar.setEnabled(true);btoGravar.setVisible(true);
				btoCancelar.setEnabled(true);btoCancelar.setVisible(true);
				btoSair.setEnabled(false);btoSair.setVisible(false);
			}catch(Exception ex){
				JOptionPane.showMessageDialog(this,"Cliente gravado com sucesso!","ControlMoto", JOptionPane.INFORMATION_MESSAGE);
			}
		}

		if (c.getSource() == btoGravar) {
			try{
				CadEnderecoVO enderecoVO = new CadEnderecoVO();
				enderecoVO.setCep(JtxtCep.getText());
				enderecoVO.setEndereco(txtEndereco.getText());
				enderecoVO.setBairro(txtBairro.getText());
				enderecoVO.setCidade(txtCidade.getText());
				enderecoVO.setEstado(String.valueOf(jcbEstado.getSelectedItem()));
				
				CadEnderecoDAO enderecoDAO = new CadEnderecoDAO();
				try {
					enderecoDAO.saveEnderecoDAO(enderecoVO);
				} catch (InstantiationException | IllegalAccessException e) {
					e.printStackTrace();
				}finally{
					try {
						ConnectionFactory.getClosedConnection();
					} catch (IllegalAccessException | InstantiationException e) {
						e.printStackTrace();
					}
				}
				
				CadTelefoneVO telefoneVO = new CadTelefoneVO();
				telefoneVO.setCelularA(JtxtCelularA.getText());
				telefoneVO.setFaxA(JtxtFaxA.getText());
				telefoneVO.setTelefoneA(JtxtTelefoneA.getText());
							
				CadTelefoneDAO telefoneDAO = new CadTelefoneDAO();
				try {
					telefoneDAO.saveTelefoneDAO(telefoneVO);
				} catch (InstantiationException | IllegalAccessException e) {
					e.printStackTrace();
				}finally{
					try {
						ConnectionFactory.getClosedConnection();
					} catch (IllegalAccessException | InstantiationException e) {
						e.printStackTrace();
					}
				}
				
				CadClienteVO clienteVO = new CadClienteVO();
				clienteVO.setClientePk(Integer.parseInt((txtCodigo.getText())));
				clienteVO.setEnderecoFk(enderecoVO.getEnderecoPk());
				clienteVO.setTelefoneFk(telefoneVO.getTelefonePk());
				clienteVO.setNome(txtNome.getText());
				clienteVO.setNumero(txtNumero.getText());
				clienteVO.setCnpj(JtxtCnpj.getText());
				clienteVO.setInscricaoestadual(JtxtInscricaoestadual.getText());
				clienteVO.setContato(txtContato.getText());
				clienteVO.setSite(txtSite.getText());
				clienteVO.setEmail(txtEmail.getText());
				clienteVO.setValorHora(txtTabPreco.getText());
				clienteVO.setTaxa(txtTaxa.getText());
				clienteVO.setDataCadastros(timestamp);
				
				CadClienteDAO clienteDAO = new CadClienteDAO();
				try {
					clienteDAO.saveClienteDAO(clienteVO);
				} catch (InstantiationException | IllegalAccessException e) {
					e.printStackTrace();
				}finally{
					try {
						ConnectionFactory.getClosedConnection();
					} catch (IllegalAccessException | InstantiationException e) {
						e.printStackTrace();
					}
				}
			} catch (SQLException ex) {
				JOptionPane.showMessageDialog(this,"Erro ao gravado o cliente.","ControlMoto",JOptionPane.INFORMATION_MESSAGE);
			}
			JOptionPane.showMessageDialog(this,"Cliente gravado com sucesso.","ControlMoto",JOptionPane.INFORMATION_MESSAGE);
			
			limpaCampos();
			
			btoIncluir.setEnabled(true);
			btoGravar.setEnabled(false);
			btoLocalizar.setEnabled(true);
			btoCancelar.setVisible(false);btoCancelar.setEnabled(false);
			btoSair.setVisible(true);btoSair.setEnabled(true);
		}
		
		if (c.getSource() == btoLocalizar) {
		  try {
				//POPULA O VO DE EMPRESA PARA REALIZAR A BUSCA DA EMPRESA
				CadClienteVO clienteVO = new CadClienteVO();
				clienteVO.setClientePk(Integer.parseInt(JOptionPane.showInputDialog(this,"Digite o  do cliente!","ControlMoto",JOptionPane.INFORMATION_MESSAGE)));
				CadClienteDAO clienteDAO = new CadClienteDAO();
				try {
					clienteVO = clienteDAO.readClienteByPk(clienteVO);
				} catch (InstantiationException | IllegalAccessException e) {
					e.printStackTrace();
				}finally{
					try {
						ConnectionFactory.getClosedConnection();
					} catch (IllegalAccessException | InstantiationException e) {
						e.printStackTrace();
					}
				}
	
				enderecoPk = clienteVO.getEnderecoFk();
				telefonePk = clienteVO.getTelefoneFk();
				txtCodigo.setText(String.valueOf(clienteVO.getClientePk()));
				txtNome.setText(clienteVO.getNome());
				txtNumero.setText(clienteVO.getNumero());
				JtxtCnpj.setText(clienteVO.getCnpj());
				JtxtInscricaoestadual.setText(clienteVO.getInscricaoestadual());
				txtSite.setText(clienteVO.getSite());
				txtTabPreco.setText(clienteVO.getValorHora());
				txtTaxa.setText(clienteVO.getTaxa());
				txtEmail.setText(clienteVO.getEmail());
				txtContato.setText(clienteVO.getContato());
				txtDataCadastro.setText(String.valueOf(sdf.format(clienteVO.getDataCadastros())));
				//POPULA O VO DE ENDERECO PARA REALIZAR A BUSCA DO ENDERECO
				CadEnderecoVO enderecoVO = new CadEnderecoVO();
				enderecoVO.setEnderecoPk(clienteVO.getEnderecoFk());
				CadEnderecoDAO enderecoDAO = new CadEnderecoDAO();
				try {
					enderecoDAO.readEnderecoByPk(enderecoVO);
				} catch (InstantiationException | IllegalAccessException e) {
					e.printStackTrace();
				}finally{
					try {
						ConnectionFactory.getClosedConnection();
					} catch (IllegalAccessException | InstantiationException e) {
						e.printStackTrace();
					}
				}
				JtxtCep.setText(enderecoVO.getCep());
				txtEndereco.setText(enderecoVO.getEndereco());
				txtNumero.setText(clienteVO.getNumero());
				txtBairro.setText(enderecoVO.getBairro());
				txtCidade.setText(enderecoVO.getCidade());
				jcbEstado.setSelectedItem(enderecoVO.getEstado());
				//POPULA O VO DE TELEFONE PARA REALIZAR A BUSCA DO TELEFONE
				CadTelefoneVO telefoneVO = new CadTelefoneVO();
				telefoneVO.setTelefonePk(clienteVO.getTelefoneFk());
				CadTelefoneDAO telefoneDAO = new CadTelefoneDAO();
				try {
					telefoneDAO.readTelefoneByPk(telefoneVO);
				} catch (InstantiationException | IllegalAccessException e) {
					e.printStackTrace();
				}finally{
					try {
						ConnectionFactory.getClosedConnection();
					} catch (IllegalAccessException | InstantiationException e) {
						e.printStackTrace();
					}
				}		
				JtxtTelefoneA.setText(telefoneVO.getTelefoneA());
				JtxtFaxA.setText(telefoneVO.getFaxA());
				JtxtCelularA.setText(telefoneVO.getCelularA());
	
				btoAtualizar.setVisible(true);btoAtualizar.setEnabled(true);
				btoLocalizar.setVisible(false);
				btoIncluir.setEnabled(false);
				btoExcluir.setEnabled(true);
				btoCancelar.setVisible(true);btoCancelar.setEnabled(true);
				btoSair.setVisible(false);
			} catch (SQLException e) {
				JOptionPane.showMessageDialog(this,"Cliente não localizada.\nPara cadastrar clique em incluir.","ControlMoto",JOptionPane.INFORMATION_MESSAGE);
			}

		}
		
		if (c.getSource() == btoAtualizar) {
			try{
			CadClienteVO clienteVO = new CadClienteVO();
			clienteVO.setClientePk(Integer.parseInt(txtCodigo.getText()));
			clienteVO.setNome(txtNome.getText());
			clienteVO.setNumero(txtNumero.getText());
			clienteVO.setCnpj(JtxtCnpj.getText());
			clienteVO.setInscricaoestadual(JtxtInscricaoestadual.getText());
			clienteVO.setSite(txtSite.getText());
			clienteVO.setEmail(txtEmail.getText());
			clienteVO.setContato(txtContato.getText());
			clienteVO.setValorHora(txtTabPreco.getText());
			clienteVO.setTaxa(txtTaxa.getText());
			try{
				clienteVO.setDataCadastros(new java.sql.Timestamp(sdf.parse(txtDataCadastro.getText()).getTime()));
			}catch (Exception e) {}
			
			CadClienteDAO clienteDAO = new CadClienteDAO();
			int res=0;
			try {
				res = clienteDAO.alterClienteByPk(clienteVO);
			} catch (InstantiationException | IllegalAccessException e) {
				e.printStackTrace();
			}finally{
				try {
					ConnectionFactory.getClosedConnection();
				} catch (IllegalAccessException | InstantiationException e) {
					e.printStackTrace();
				}
			}
			
			CadEnderecoVO enderecoVO = new CadEnderecoVO();
			enderecoVO.setEnderecoPk(enderecoPk);
			enderecoVO.setCep(JtxtCep.getText());
			enderecoVO.setEndereco(txtEndereco.getText());
			enderecoVO.setBairro(txtBairro.getText());
			enderecoVO.setCidade(txtCidade.getText());
			enderecoVO.setEstado(String.valueOf(jcbEstado.getSelectedItem()));
			
			CadEnderecoDAO enderecoDAO = new CadEnderecoDAO();
			try {
				enderecoDAO.alterEnderecoByPk(enderecoVO);
			} catch (InstantiationException | IllegalAccessException e) {
				e.printStackTrace();
			}finally{
				try {
					ConnectionFactory.getClosedConnection();
				} catch (IllegalAccessException | InstantiationException e) {
					e.printStackTrace();
				}
			}
			
			CadTelefoneVO telefoneVO = new CadTelefoneVO();
			telefoneVO.setTelefonePk(telefonePk);
			telefoneVO.setFaxA(JtxtFaxA.getText());
			telefoneVO.setTelefoneA(JtxtTelefoneA.getText());
			telefoneVO.setCelularA(JtxtCelularA.getText());
			
			CadTelefoneDAO telefoneDAO = new CadTelefoneDAO();
			try {
				telefoneDAO.alterTelefoneByPk(telefoneVO);
			} catch (InstantiationException | IllegalAccessException e) {
				e.printStackTrace();
			}finally{
				try {
					ConnectionFactory.getClosedConnection();
				} catch (IllegalAccessException | InstantiationException e) {
					e.printStackTrace();
				}
			}
			
			btoAtualizar.setVisible(false);	btoLocalizar.setVisible(true); btoIncluir.setEnabled(true);
			btoExcluir.setEnabled(false); btoSair.setVisible(true); btoCancelar.setVisible(false);
			
			limpaCampos();
			
			if(res == 1){
				JOptionPane.showMessageDialog(this,"Atualização realizada com sucesso!","ControlMoto", JOptionPane.INFORMATION_MESSAGE);
			}
			}catch (SQLException ex) {
				JOptionPane.showMessageDialog(this,"Erro na atualização dos dados.","ControlMoto",JOptionPane.INFORMATION_MESSAGE);
			}

		}

		if (c.getSource() == btoExcluir) {
			try{
				CadClienteVO clienteVO = new CadClienteVO();
				clienteVO.setClientePk(Integer.valueOf(txtCodigo.getText()));
				
				CadClienteDAO clienteDAO = new CadClienteDAO();
				try {
					clienteDAO.deleteClienteByPk(clienteVO);
				} catch (InstantiationException | IllegalAccessException e) {
					e.printStackTrace();
				}finally{
					try {
						ConnectionFactory.getClosedConnection();
					} catch (IllegalAccessException | InstantiationException e) {
						e.printStackTrace();
					}
				}
				
				btoIncluir.setEnabled(true); btoIncluir.setVisible(true); btoLocalizar.setEnabled(true); btoLocalizar.setVisible(true);
				btoAtualizar.setEnabled(false); btoAtualizar.setVisible(false); btoGravar.setEnabled(false); btoExcluir.setEnabled(false);
				btoExcluir.setVisible(true); btoSair.setEnabled(true); btoSair.setVisible(true); btoCancelar.setEnabled(false);
				btoCancelar.setVisible(false);
				
				limpaCampos();
			}catch (SQLException ex) {
				JOptionPane.showMessageDialog(this,"Cliente não foi excluido.","ControlMoto",JOptionPane.INFORMATION_MESSAGE);
			}
			
		}

		if (c.getSource() == btoCancelar) {
			try{
				JOptionPane.showMessageDialog(this, "Procedimento cancelado!","Moto Expores",JOptionPane.INFORMATION_MESSAGE);
				btoIncluir.setVisible(true); btoIncluir.setEnabled(true); btoLocalizar.setVisible(true); btoLocalizar.setEnabled(true);
				btoAtualizar.setVisible(false); btoGravar.setEnabled(false); btoExcluir.setEnabled(false); btoCancelar.setVisible(false);
				btoCancelar.setEnabled(false); btoSair.setVisible(true); btoSair.setEnabled(true);
				limpaCampos();
				atualizaCampos();
				rs.close();
				minhaSTM.isClosed();
                minhaConexao.isClosed();
             }catch(Exception ex){
               	System.out.println("Não limpa campos");
             }
        }

		if (c.getSource() == btoSair) {
			int resultado = JOptionPane.showConfirmDialog(this,"Deseja sair do cadastro de cliente?", "ControlMoto", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE);
			if (resultado == 0)
				CadCliente.this.dispose();
			else
				return;
			}
		}

	private MaskFormatter setMascara(String mascara) {
		MaskFormatter mask = null;
		try {
			mask = new MaskFormatter(mascara);
		} catch (java.text.ParseException e) {
		}
		return mask;
	}

	class MeuDocument extends PlainDocument {
		public void insertString(int offs, String str, AttributeSet a)
		throws BadLocationException {
			super.insertString(offs, str.toUpperCase(), a);
		}
	}

	public void limpaCampos() {
		txtCodigo.setText("");
		txtNome.setText("");
		JtxtCnpj.setText("");
		JtxtInscricaoestadual.setText("");
		txtEndereco.setText("");
		txtNumero.setText("");
		txtBairro.setText("");
		txtCidade.setText("");
		jcbEstado.setSelectedItem("");
		JtxtCep.setText("");
		txtContato.setText("");
		JtxtTelefoneA.setText("");
		JtxtFaxA.setText("");
		JtxtCelularA.setText("");
		txtSite.setText("");
		txtEmail.setText("");
		txtTabPreco.setText("");
		txtTaxa.setText("");
		txtDataCadastro.setText("");
	}

	public void atualizaCampos() {
		try {
			txtCodigo.setText(rs.getString("Codigo"));
			txtNome.setText(rs.getString("NomeCliente"));
			JtxtCnpj.setText(rs.getString("Cnpj"));
			JtxtInscricaoestadual.setText(rs.getString("IE"));
			txtEndereco.setText(rs.getString("Endereco"));
			txtNumero.setText(rs.getString("Numero"));
			txtCidade.setText(rs.getString("Cidade"));
			jcbEstado.setSelectedItem(rs.getString("Estado"));
			JtxtCep.setText(rs.getString("Cep"));
			txtContato.setText(rs.getString("Contato"));
			JtxtTelefoneA.setText(rs.getString("TelefoneA"));
			JtxtFaxA.setText(rs.getString("FaxA"));
			JtxtCelularA.setText(rs.getString("CelularA"));
			txtSite.setText(rs.getString("Site"));
			txtEmail.setText(rs.getString("Email"));
			txtTabPreco.setText(rs.getString("ValorHora"));
			txtTaxa.setText(rs.getString("Taxa"));
			txtDataCadastro.setText(rs.getString("DataCadastro"));
		} catch (SQLException ex) {
		}
	}


}